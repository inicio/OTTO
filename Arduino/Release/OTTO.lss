
OTTO.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000006c  00800100  00001478  0000150c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001478  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000d4  0080016c  0080016c  00001578  2**0
                  ALLOC
  3 .stab         0000990c  00000000  00000000  00001578  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      0001152c  00000000  00000000  0000ae84  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 64 00 	jmp	0xc8	; 0xc8 <__dtors_end>
       4:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       8:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
       c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      10:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      14:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      18:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      1c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      20:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      24:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      28:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      2c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      30:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      34:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      38:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      3c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      40:	0c 94 27 07 	jmp	0xe4e	; 0xe4e <__vector_16>
      44:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      48:	0c 94 d0 05 	jmp	0xba0	; 0xba0 <__vector_18>
      4c:	0c 94 f8 05 	jmp	0xbf0	; 0xbf0 <__vector_19>
      50:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      54:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      58:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      5c:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      60:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>
      64:	0c 94 8c 00 	jmp	0x118	; 0x118 <__bad_interrupt>

00000068 <port_to_mode_PGM>:
      68:	00 00 00 00 24 00 27 00 2a 00                       ....$.'.*.

00000072 <port_to_output_PGM>:
      72:	00 00 00 00 25 00 28 00 2b 00                       ....%.(.+.

0000007c <port_to_input_PGM>:
      7c:	00 00 00 00 23 00 26 00 29 00                       ....#.&.).

00000086 <digital_pin_to_port_PGM>:
      86:	04 04 04 04 04 04 04 04 02 02 02 02 02 02 03 03     ................
      96:	03 03 03 03                                         ....

0000009a <digital_pin_to_bit_mask_PGM>:
      9a:	01 02 04 08 10 20 40 80 01 02 04 08 10 20 01 02     ..... @...... ..
      aa:	04 08 10 20                                         ... 

000000ae <digital_pin_to_timer_PGM>:
      ae:	00 00 00 07 00 02 01 00 00 03 04 06 00 00 00 00     ................
      be:	00 00 00 00                                         ....

000000c2 <__ctors_start>:
      c2:	1d 04       	cpc	r1, r13
      c4:	bd 06       	cpc	r11, r29

000000c6 <__ctors_end>:
      c6:	22 04       	cpc	r2, r2

000000c8 <__dtors_end>:
      c8:	11 24       	eor	r1, r1
      ca:	1f be       	out	0x3f, r1	; 63
      cc:	cf ef       	ldi	r28, 0xFF	; 255
      ce:	d8 e0       	ldi	r29, 0x08	; 8
      d0:	de bf       	out	0x3e, r29	; 62
      d2:	cd bf       	out	0x3d, r28	; 61

000000d4 <__do_copy_data>:
      d4:	11 e0       	ldi	r17, 0x01	; 1
      d6:	a0 e0       	ldi	r26, 0x00	; 0
      d8:	b1 e0       	ldi	r27, 0x01	; 1
      da:	e8 e7       	ldi	r30, 0x78	; 120
      dc:	f4 e1       	ldi	r31, 0x14	; 20
      de:	02 c0       	rjmp	.+4      	; 0xe4 <__do_copy_data+0x10>
      e0:	05 90       	lpm	r0, Z+
      e2:	0d 92       	st	X+, r0
      e4:	ac 36       	cpi	r26, 0x6C	; 108
      e6:	b1 07       	cpc	r27, r17
      e8:	d9 f7       	brne	.-10     	; 0xe0 <__do_copy_data+0xc>

000000ea <__do_clear_bss>:
      ea:	12 e0       	ldi	r17, 0x02	; 2
      ec:	ac e6       	ldi	r26, 0x6C	; 108
      ee:	b1 e0       	ldi	r27, 0x01	; 1
      f0:	01 c0       	rjmp	.+2      	; 0xf4 <.do_clear_bss_start>

000000f2 <.do_clear_bss_loop>:
      f2:	1d 92       	st	X+, r1

000000f4 <.do_clear_bss_start>:
      f4:	a0 34       	cpi	r26, 0x40	; 64
      f6:	b1 07       	cpc	r27, r17
      f8:	e1 f7       	brne	.-8      	; 0xf2 <.do_clear_bss_loop>

000000fa <__do_global_ctors>:
      fa:	10 e0       	ldi	r17, 0x00	; 0
      fc:	c6 ec       	ldi	r28, 0xC6	; 198
      fe:	d0 e0       	ldi	r29, 0x00	; 0
     100:	04 c0       	rjmp	.+8      	; 0x10a <__do_global_ctors+0x10>
     102:	22 97       	sbiw	r28, 0x02	; 2
     104:	fe 01       	movw	r30, r28
     106:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <__tablejump__>
     10a:	c2 3c       	cpi	r28, 0xC2	; 194
     10c:	d1 07       	cpc	r29, r17
     10e:	c9 f7       	brne	.-14     	; 0x102 <__do_global_ctors+0x8>
     110:	0e 94 61 04 	call	0x8c2	; 0x8c2 <main>
     114:	0c 94 2f 0a 	jmp	0x145e	; 0x145e <__do_global_dtors>

00000118 <__bad_interrupt>:
     118:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

0000011c <_ZN13SoftwareServoC1Ev>:

SoftwareServo *SoftwareServo::first;

#define NO_ANGLE (0xff)

SoftwareServo::SoftwareServo() : pin(0),angle(NO_ANGLE),pulse0(0),min16(34),max16(150),next(0)
     11c:	fc 01       	movw	r30, r24
     11e:	10 82       	st	Z, r1
     120:	8f ef       	ldi	r24, 0xFF	; 255
     122:	81 83       	std	Z+1, r24	; 0x01
     124:	13 82       	std	Z+3, r1	; 0x03
     126:	12 82       	std	Z+2, r1	; 0x02
     128:	82 e2       	ldi	r24, 0x22	; 34
     12a:	84 83       	std	Z+4, r24	; 0x04
     12c:	86 e9       	ldi	r24, 0x96	; 150
     12e:	85 83       	std	Z+5, r24	; 0x05
     130:	17 82       	std	Z+7, r1	; 0x07
     132:	16 82       	std	Z+6, r1	; 0x06
{}
     134:	08 95       	ret

00000136 <_ZN13SoftwareServo6attachEi>:
{
    max16 = t/16;
}

uint8_t SoftwareServo::attach(int pinArg)
{
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	ec 01       	movw	r28, r24
     13c:	86 2f       	mov	r24, r22
    pin = pinArg;
     13e:	68 83       	st	Y, r22
    angle = NO_ANGLE;
     140:	9f ef       	ldi	r25, 0xFF	; 255
     142:	99 83       	std	Y+1, r25	; 0x01
    pulse0 = 0;
     144:	1b 82       	std	Y+3, r1	; 0x03
     146:	1a 82       	std	Y+2, r1	; 0x02
    next = first;
     148:	20 91 6c 01 	lds	r18, 0x016C
     14c:	30 91 6d 01 	lds	r19, 0x016D
     150:	3f 83       	std	Y+7, r19	; 0x07
     152:	2e 83       	std	Y+6, r18	; 0x06
    first = this;
     154:	d0 93 6d 01 	sts	0x016D, r29
     158:	c0 93 6c 01 	sts	0x016C, r28
    digitalWrite(pin,0);
     15c:	60 e0       	ldi	r22, 0x00	; 0
     15e:	0e 94 56 08 	call	0x10ac	; 0x10ac <digitalWrite>
    pinMode(pin,OUTPUT);
     162:	88 81       	ld	r24, Y
     164:	61 e0       	ldi	r22, 0x01	; 1
     166:	0e 94 32 08 	call	0x1064	; 0x1064 <pinMode>
    return 1;
}
     16a:	81 e0       	ldi	r24, 0x01	; 1
     16c:	df 91       	pop	r29
     16e:	cf 91       	pop	r28
     170:	08 95       	ret

00000172 <_ZN13SoftwareServo5writeEi>:
	}
    }
}

void SoftwareServo::write(int angleArg)
{
     172:	1f 93       	push	r17
     174:	cf 93       	push	r28
     176:	df 93       	push	r29
     178:	ec 01       	movw	r28, r24
     17a:	9b 01       	movw	r18, r22
    if ( angleArg < 0) angleArg = 0;
     17c:	77 fd       	sbrc	r23, 7
     17e:	04 c0       	rjmp	.+8      	; 0x188 <_ZN13SoftwareServo5writeEi+0x16>
    if ( angleArg > 180) angleArg = 180;
     180:	65 3b       	cpi	r22, 0xB5	; 181
     182:	71 05       	cpc	r23, r1
     184:	24 f4       	brge	.+8      	; 0x18e <_ZN13SoftwareServo5writeEi+0x1c>
     186:	05 c0       	rjmp	.+10     	; 0x192 <_ZN13SoftwareServo5writeEi+0x20>
    }
}

void SoftwareServo::write(int angleArg)
{
    if ( angleArg < 0) angleArg = 0;
     188:	20 e0       	ldi	r18, 0x00	; 0
     18a:	30 e0       	ldi	r19, 0x00	; 0
     18c:	02 c0       	rjmp	.+4      	; 0x192 <_ZN13SoftwareServo5writeEi+0x20>
    if ( angleArg > 180) angleArg = 180;
     18e:	24 eb       	ldi	r18, 0xB4	; 180
     190:	30 e0       	ldi	r19, 0x00	; 0
    angle = angleArg;
     192:	29 83       	std	Y+1, r18	; 0x01
    // bleh, have to use longs to prevent overflow, could be tricky if always a 16MHz clock, but not true
    // That 64L on the end is the TCNT0 prescaler, it will need to change if the clock's prescaler changes,
    // but then there will likely be an overflow problem, so it will have to be handled by a human.
    pulse0 = (min16*16L*clockCyclesPerMicrosecond() + (max16-min16)*(16L*clockCyclesPerMicrosecond())*angle/180L)/64L;
     194:	1c 81       	ldd	r17, Y+4	; 0x04
     196:	8d 81       	ldd	r24, Y+5	; 0x05
     198:	90 e0       	ldi	r25, 0x00	; 0
     19a:	81 1b       	sub	r24, r17
     19c:	91 09       	sbc	r25, r1
     19e:	aa 27       	eor	r26, r26
     1a0:	97 fd       	sbrc	r25, 7
     1a2:	a0 95       	com	r26
     1a4:	ba 2f       	mov	r27, r26
     1a6:	66 27       	eor	r22, r22
     1a8:	78 2f       	mov	r23, r24
     1aa:	89 2f       	mov	r24, r25
     1ac:	9a 2f       	mov	r25, r26
     1ae:	30 e0       	ldi	r19, 0x00	; 0
     1b0:	40 e0       	ldi	r20, 0x00	; 0
     1b2:	50 e0       	ldi	r21, 0x00	; 0
     1b4:	0e 94 8e 08 	call	0x111c	; 0x111c <__mulsi3>
     1b8:	24 eb       	ldi	r18, 0xB4	; 180
     1ba:	30 e0       	ldi	r19, 0x00	; 0
     1bc:	40 e0       	ldi	r20, 0x00	; 0
     1be:	50 e0       	ldi	r21, 0x00	; 0
     1c0:	0e 94 c0 08 	call	0x1180	; 0x1180 <__udivmodsi4>
     1c4:	81 2f       	mov	r24, r17
     1c6:	90 e0       	ldi	r25, 0x00	; 0
     1c8:	a0 e0       	ldi	r26, 0x00	; 0
     1ca:	b0 e0       	ldi	r27, 0x00	; 0
     1cc:	ba 2f       	mov	r27, r26
     1ce:	a9 2f       	mov	r26, r25
     1d0:	98 2f       	mov	r25, r24
     1d2:	88 27       	eor	r24, r24
     1d4:	28 0f       	add	r18, r24
     1d6:	39 1f       	adc	r19, r25
     1d8:	4a 1f       	adc	r20, r26
     1da:	5b 1f       	adc	r21, r27
     1dc:	66 e0       	ldi	r22, 0x06	; 6
     1de:	56 95       	lsr	r21
     1e0:	47 95       	ror	r20
     1e2:	37 95       	ror	r19
     1e4:	27 95       	ror	r18
     1e6:	6a 95       	dec	r22
     1e8:	d1 f7       	brne	.-12     	; 0x1de <_ZN13SoftwareServo5writeEi+0x6c>
     1ea:	3b 83       	std	Y+3, r19	; 0x03
     1ec:	2a 83       	std	Y+2, r18	; 0x02
}
     1ee:	df 91       	pop	r29
     1f0:	cf 91       	pop	r28
     1f2:	1f 91       	pop	r17
     1f4:	08 95       	ret

000001f6 <_ZN13SoftwareServo7refreshEv>:
    }
    return 0;
}

void SoftwareServo::refresh()
{
     1f6:	4f 92       	push	r4
     1f8:	5f 92       	push	r5
     1fa:	7f 92       	push	r7
     1fc:	8f 92       	push	r8
     1fe:	9f 92       	push	r9
     200:	af 92       	push	r10
     202:	bf 92       	push	r11
     204:	cf 92       	push	r12
     206:	df 92       	push	r13
     208:	ef 92       	push	r14
     20a:	ff 92       	push	r15
     20c:	0f 93       	push	r16
     20e:	1f 93       	push	r17
     210:	df 93       	push	r29
     212:	cf 93       	push	r28
     214:	cd b7       	in	r28, 0x3d	; 61
     216:	de b7       	in	r29, 0x3e	; 62
		digitalWrite( s[i]->pin,0);
		break;
	    }
	}
    }
}
     218:	4d b6       	in	r4, 0x3d	; 61
     21a:	5e b6       	in	r5, 0x3e	; 62
    uint8_t start = TCNT0;
    uint8_t now = start;
    uint8_t last = now;

    // Now wait for each pin's time in turn..
    for ( i = 0; i < count; i++) {
     21c:	ad b6       	in	r10, 0x3d	; 61
     21e:	75 2c       	mov	r7, r5
{
    uint8_t count = 0, i = 0;
    uint16_t base = 0;
    SoftwareServo *p;
    static unsigned long lastRefresh = 0;
    unsigned long m = millis();
     220:	0e 94 6f 07 	call	0xede	; 0xede <millis>

    // if we haven't wrapped millis, and 20ms have not passed, then don't do anything
    if ( m >= lastRefresh && m < lastRefresh + 20) return;
     224:	20 91 6e 01 	lds	r18, 0x016E
     228:	30 91 6f 01 	lds	r19, 0x016F
     22c:	40 91 70 01 	lds	r20, 0x0170
     230:	50 91 71 01 	lds	r21, 0x0171
     234:	62 17       	cp	r22, r18
     236:	73 07       	cpc	r23, r19
     238:	84 07       	cpc	r24, r20
     23a:	95 07       	cpc	r25, r21
     23c:	50 f0       	brcs	.+20     	; 0x252 <_ZN13SoftwareServo7refreshEv+0x5c>
     23e:	2c 5e       	subi	r18, 0xEC	; 236
     240:	3f 4f       	sbci	r19, 0xFF	; 255
     242:	4f 4f       	sbci	r20, 0xFF	; 255
     244:	5f 4f       	sbci	r21, 0xFF	; 255
     246:	62 17       	cp	r22, r18
     248:	73 07       	cpc	r23, r19
     24a:	84 07       	cpc	r24, r20
     24c:	95 07       	cpc	r25, r21
     24e:	08 f4       	brcc	.+2      	; 0x252 <_ZN13SoftwareServo7refreshEv+0x5c>
     250:	a4 c0       	rjmp	.+328    	; 0x39a <_ZN13SoftwareServo7refreshEv+0x1a4>
    lastRefresh = m;
     252:	60 93 6e 01 	sts	0x016E, r22
     256:	70 93 6f 01 	sts	0x016F, r23
     25a:	80 93 70 01 	sts	0x0170, r24
     25e:	90 93 71 01 	sts	0x0171, r25

    for ( p = first; p != 0; p = p->next ) if ( p->pulse0) count++;
     262:	e0 91 6c 01 	lds	r30, 0x016C
     266:	f0 91 6d 01 	lds	r31, 0x016D
    return 0;
}

void SoftwareServo::refresh()
{
    uint8_t count = 0, i = 0;
     26a:	bb 24       	eor	r11, r11

    // if we haven't wrapped millis, and 20ms have not passed, then don't do anything
    if ( m >= lastRefresh && m < lastRefresh + 20) return;
    lastRefresh = m;

    for ( p = first; p != 0; p = p->next ) if ( p->pulse0) count++;
     26c:	08 c0       	rjmp	.+16     	; 0x27e <_ZN13SoftwareServo7refreshEv+0x88>
     26e:	82 81       	ldd	r24, Z+2	; 0x02
     270:	93 81       	ldd	r25, Z+3	; 0x03
     272:	00 97       	sbiw	r24, 0x00	; 0
     274:	09 f0       	breq	.+2      	; 0x278 <_ZN13SoftwareServo7refreshEv+0x82>
     276:	b3 94       	inc	r11
     278:	06 80       	ldd	r0, Z+6	; 0x06
     27a:	f7 81       	ldd	r31, Z+7	; 0x07
     27c:	e0 2d       	mov	r30, r0
     27e:	30 97       	sbiw	r30, 0x00	; 0
     280:	b1 f7       	brne	.-20     	; 0x26e <_ZN13SoftwareServo7refreshEv+0x78>
    if ( count == 0) return;
     282:	bb 20       	and	r11, r11
     284:	09 f4       	brne	.+2      	; 0x288 <_ZN13SoftwareServo7refreshEv+0x92>
     286:	89 c0       	rjmp	.+274    	; 0x39a <_ZN13SoftwareServo7refreshEv+0x1a4>

    // gather all the SoftwareServos in an array
    SoftwareServo *s[count];
     288:	8b 2d       	mov	r24, r11
     28a:	90 e0       	ldi	r25, 0x00	; 0
     28c:	88 0f       	add	r24, r24
     28e:	99 1f       	adc	r25, r25
     290:	ed b6       	in	r14, 0x3d	; 61
     292:	fe b6       	in	r15, 0x3e	; 62
     294:	e8 1a       	sub	r14, r24
     296:	f9 0a       	sbc	r15, r25
     298:	0f b6       	in	r0, 0x3f	; 63
     29a:	f8 94       	cli
     29c:	fe be       	out	0x3e, r15	; 62
     29e:	0f be       	out	0x3f, r0	; 63
     2a0:	ed be       	out	0x3d, r14	; 61
     2a2:	08 94       	sec
     2a4:	e1 1c       	adc	r14, r1
     2a6:	f1 1c       	adc	r15, r1
    for ( p = first; p != 0; p = p->next ) if ( p->pulse0) s[i++] = p;
     2a8:	e0 91 6c 01 	lds	r30, 0x016C
     2ac:	f0 91 6d 01 	lds	r31, 0x016D
    return 0;
}

void SoftwareServo::refresh()
{
    uint8_t count = 0, i = 0;
     2b0:	20 e0       	ldi	r18, 0x00	; 0
    for ( p = first; p != 0; p = p->next ) if ( p->pulse0) count++;
    if ( count == 0) return;

    // gather all the SoftwareServos in an array
    SoftwareServo *s[count];
    for ( p = first; p != 0; p = p->next ) if ( p->pulse0) s[i++] = p;
     2b2:	11 c0       	rjmp	.+34     	; 0x2d6 <_ZN13SoftwareServo7refreshEv+0xe0>
     2b4:	82 81       	ldd	r24, Z+2	; 0x02
     2b6:	93 81       	ldd	r25, Z+3	; 0x03
     2b8:	00 97       	sbiw	r24, 0x00	; 0
     2ba:	51 f0       	breq	.+20     	; 0x2d0 <_ZN13SoftwareServo7refreshEv+0xda>
     2bc:	a2 2f       	mov	r26, r18
     2be:	b0 e0       	ldi	r27, 0x00	; 0
     2c0:	aa 0f       	add	r26, r26
     2c2:	bb 1f       	adc	r27, r27
     2c4:	ae 0d       	add	r26, r14
     2c6:	bf 1d       	adc	r27, r15
     2c8:	11 96       	adiw	r26, 0x01	; 1
     2ca:	fc 93       	st	X, r31
     2cc:	ee 93       	st	-X, r30
     2ce:	2f 5f       	subi	r18, 0xFF	; 255
     2d0:	06 80       	ldd	r0, Z+6	; 0x06
     2d2:	f7 81       	ldd	r31, Z+7	; 0x07
     2d4:	e0 2d       	mov	r30, r0
     2d6:	30 97       	sbiw	r30, 0x00	; 0
     2d8:	69 f7       	brne	.-38     	; 0x2b4 <_ZN13SoftwareServo7refreshEv+0xbe>
     2da:	27 c0       	rjmp	.+78     	; 0x32a <_ZN13SoftwareServo7refreshEv+0x134>

    // bubblesort the SoftwareServos by pulse time, ascending order
    for(;;) {
	uint8_t moved = 0;
	for ( i = 1; i < count; i++) {
	    if ( s[i]->pulse0 < s[i-1]->pulse0) {
     2dc:	e0 2f       	mov	r30, r16
     2de:	f0 e0       	ldi	r31, 0x00	; 0
     2e0:	6f 01       	movw	r12, r30
     2e2:	cc 0c       	add	r12, r12
     2e4:	dd 1c       	adc	r13, r13
     2e6:	ce 0c       	add	r12, r14
     2e8:	df 1c       	adc	r13, r15
     2ea:	d6 01       	movw	r26, r12
     2ec:	8d 91       	ld	r24, X+
     2ee:	9c 91       	ld	r25, X
     2f0:	31 97       	sbiw	r30, 0x01	; 1
     2f2:	ee 0f       	add	r30, r30
     2f4:	ff 1f       	adc	r31, r31
     2f6:	ee 0d       	add	r30, r14
     2f8:	ff 1d       	adc	r31, r15
     2fa:	20 81       	ld	r18, Z
     2fc:	31 81       	ldd	r19, Z+1	; 0x01
     2fe:	dc 01       	movw	r26, r24
     300:	12 96       	adiw	r26, 0x02	; 2
     302:	6d 91       	ld	r22, X+
     304:	7c 91       	ld	r23, X
     306:	13 97       	sbiw	r26, 0x03	; 3
     308:	d9 01       	movw	r26, r18
     30a:	12 96       	adiw	r26, 0x02	; 2
     30c:	4d 91       	ld	r20, X+
     30e:	5c 91       	ld	r21, X
     310:	13 97       	sbiw	r26, 0x03	; 3
     312:	64 17       	cp	r22, r20
     314:	75 07       	cpc	r23, r21
     316:	38 f4       	brcc	.+14     	; 0x326 <_ZN13SoftwareServo7refreshEv+0x130>
		SoftwareServo *t = s[i];
		s[i] = s[i-1];
     318:	d6 01       	movw	r26, r12
     31a:	11 96       	adiw	r26, 0x01	; 1
     31c:	3c 93       	st	X, r19
     31e:	2e 93       	st	-X, r18
		s[i-1] = t;
     320:	91 83       	std	Z+1, r25	; 0x01
     322:	80 83       	st	Z, r24
		moved = 1;
     324:	11 e0       	ldi	r17, 0x01	; 1
    for ( p = first; p != 0; p = p->next ) if ( p->pulse0) s[i++] = p;

    // bubblesort the SoftwareServos by pulse time, ascending order
    for(;;) {
	uint8_t moved = 0;
	for ( i = 1; i < count; i++) {
     326:	0f 5f       	subi	r16, 0xFF	; 255
     328:	02 c0       	rjmp	.+4      	; 0x32e <_ZN13SoftwareServo7refreshEv+0x138>
    SoftwareServo *s[count];
    for ( p = first; p != 0; p = p->next ) if ( p->pulse0) s[i++] = p;

    // bubblesort the SoftwareServos by pulse time, ascending order
    for(;;) {
	uint8_t moved = 0;
     32a:	10 e0       	ldi	r17, 0x00	; 0
	for ( i = 1; i < count; i++) {
     32c:	01 e0       	ldi	r16, 0x01	; 1
     32e:	0b 15       	cp	r16, r11
     330:	a8 f2       	brcs	.-86     	; 0x2dc <_ZN13SoftwareServo7refreshEv+0xe6>
		s[i] = s[i-1];
		s[i-1] = t;
		moved = 1;
	    }
	}
	if ( !moved) break;
     332:	11 23       	and	r17, r17
     334:	d1 f7       	brne	.-12     	; 0x32a <_ZN13SoftwareServo7refreshEv+0x134>
     336:	87 01       	movw	r16, r14
     338:	cc 24       	eor	r12, r12
     33a:	09 c0       	rjmp	.+18     	; 0x34e <_ZN13SoftwareServo7refreshEv+0x158>
    // Note the timing error here... when you have many SoftwareServos going, the
    // ones at the front will get a pulse that is a few microseconds too long.
    // Figure about 4uS/SoftwareServo after them. This could be compensated, but I feel
    // it is within the margin of error of software SoftwareServos that could catch
    // an extra interrupt handler at any time.
    for ( i = 0; i < count; i++) digitalWrite( s[i]->pin, 1);
     33c:	d8 01       	movw	r26, r16
     33e:	ed 91       	ld	r30, X+
     340:	fd 91       	ld	r31, X+
     342:	8d 01       	movw	r16, r26
     344:	80 81       	ld	r24, Z
     346:	61 e0       	ldi	r22, 0x01	; 1
     348:	0e 94 56 08 	call	0x10ac	; 0x10ac <digitalWrite>
     34c:	c3 94       	inc	r12
     34e:	cb 14       	cp	r12, r11
     350:	a8 f3       	brcs	.-22     	; 0x33c <_ZN13SoftwareServo7refreshEv+0x146>

    uint8_t start = TCNT0;
     352:	26 b5       	in	r18, 0x26	; 38
}

void SoftwareServo::refresh()
{
    uint8_t count = 0, i = 0;
    uint16_t base = 0;
     354:	00 e0       	ldi	r16, 0x00	; 0
     356:	10 e0       	ldi	r17, 0x00	; 0
    uint8_t start = TCNT0;
    uint8_t now = start;
    uint8_t last = now;

    // Now wait for each pin's time in turn..
    for ( i = 0; i < count; i++) {
     358:	88 24       	eor	r8, r8
	uint16_t go = start + s[i]->pulse0;
     35a:	c2 2e       	mov	r12, r18
     35c:	dd 24       	eor	r13, r13
    uint8_t start = TCNT0;
    uint8_t now = start;
    uint8_t last = now;

    // Now wait for each pin's time in turn..
    for ( i = 0; i < count; i++) {
     35e:	1b c0       	rjmp	.+54     	; 0x396 <_ZN13SoftwareServo7refreshEv+0x1a0>
	uint16_t go = start + s[i]->pulse0;
     360:	d7 01       	movw	r26, r14
     362:	ed 91       	ld	r30, X+
     364:	fd 91       	ld	r31, X+
     366:	7d 01       	movw	r14, r26
     368:	82 81       	ldd	r24, Z+2	; 0x02
     36a:	93 81       	ldd	r25, Z+3	; 0x03
     36c:	8c 0d       	add	r24, r12
     36e:	9d 1d       	adc	r25, r13
     370:	01 c0       	rjmp	.+2      	; 0x374 <_ZN13SoftwareServo7refreshEv+0x17e>

	// loop until we reach or pass 'go' time
	for (;;) {
	    now = TCNT0;
     372:	29 2d       	mov	r18, r9
     374:	96 b4       	in	r9, 0x26	; 38
	    if ( now < last) base += 256;
     376:	92 16       	cp	r9, r18
     378:	10 f4       	brcc	.+4      	; 0x37e <_ZN13SoftwareServo7refreshEv+0x188>
     37a:	00 50       	subi	r16, 0x00	; 0
     37c:	1f 4f       	sbci	r17, 0xFF	; 255
	    last = now;

	    if ( base+now > go) {
     37e:	98 01       	movw	r18, r16
     380:	29 0d       	add	r18, r9
     382:	31 1d       	adc	r19, r1
     384:	82 17       	cp	r24, r18
     386:	93 07       	cpc	r25, r19
     388:	a0 f7       	brcc	.-24     	; 0x372 <_ZN13SoftwareServo7refreshEv+0x17c>
		digitalWrite( s[i]->pin,0);
     38a:	80 81       	ld	r24, Z
     38c:	60 e0       	ldi	r22, 0x00	; 0
     38e:	0e 94 56 08 	call	0x10ac	; 0x10ac <digitalWrite>
    uint8_t start = TCNT0;
    uint8_t now = start;
    uint8_t last = now;

    // Now wait for each pin's time in turn..
    for ( i = 0; i < count; i++) {
     392:	83 94       	inc	r8
	uint16_t go = start + s[i]->pulse0;

	// loop until we reach or pass 'go' time
	for (;;) {
	    now = TCNT0;
     394:	29 2d       	mov	r18, r9
    uint8_t start = TCNT0;
    uint8_t now = start;
    uint8_t last = now;

    // Now wait for each pin's time in turn..
    for ( i = 0; i < count; i++) {
     396:	8b 14       	cp	r8, r11
     398:	18 f3       	brcs	.-58     	; 0x360 <_ZN13SoftwareServo7refreshEv+0x16a>
     39a:	8a 2d       	mov	r24, r10
     39c:	97 2d       	mov	r25, r7
     39e:	0f b6       	in	r0, 0x3f	; 63
     3a0:	f8 94       	cli
     3a2:	9e bf       	out	0x3e, r25	; 62
     3a4:	0f be       	out	0x3f, r0	; 63
     3a6:	8d bf       	out	0x3d, r24	; 61
		digitalWrite( s[i]->pin,0);
		break;
	    }
	}
    }
}
     3a8:	0f b6       	in	r0, 0x3f	; 63
     3aa:	f8 94       	cli
     3ac:	5e be       	out	0x3e, r5	; 62
     3ae:	0f be       	out	0x3f, r0	; 63
     3b0:	4d be       	out	0x3d, r4	; 61
     3b2:	cf 91       	pop	r28
     3b4:	df 91       	pop	r29
     3b6:	1f 91       	pop	r17
     3b8:	0f 91       	pop	r16
     3ba:	ff 90       	pop	r15
     3bc:	ef 90       	pop	r14
     3be:	df 90       	pop	r13
     3c0:	cf 90       	pop	r12
     3c2:	bf 90       	pop	r11
     3c4:	af 90       	pop	r10
     3c6:	9f 90       	pop	r9
     3c8:	8f 90       	pop	r8
     3ca:	7f 90       	pop	r7
     3cc:	5f 90       	pop	r5
     3ce:	4f 90       	pop	r4
     3d0:	08 95       	ret

000003d2 <_ZN11CompositionD1Ev>:
	note_index = 0; // init
	comp_length = 0; // init

}

Composition::~Composition() {
     3d2:	0f 93       	push	r16
     3d4:	1f 93       	push	r17
     3d6:	cf 93       	push	r28
     3d8:	df 93       	push	r29
     3da:	28 e3       	ldi	r18, 0x38	; 56
     3dc:	31 e0       	ldi	r19, 0x01	; 1
     3de:	fc 01       	movw	r30, r24
     3e0:	21 93       	st	Z+, r18
     3e2:	31 93       	st	Z+, r19
     3e4:	8f 01       	movw	r16, r30

}
     3e6:	30 97       	sbiw	r30, 0x00	; 0
     3e8:	79 f0       	breq	.+30     	; 0x408 <_ZN11CompositionD1Ev+0x36>
     3ea:	ec 01       	movw	r28, r24
     3ec:	c6 58       	subi	r28, 0x86	; 134
     3ee:	df 4f       	sbci	r29, 0xFF	; 255
     3f0:	c0 17       	cp	r28, r16
     3f2:	d1 07       	cpc	r29, r17
     3f4:	49 f0       	breq	.+18     	; 0x408 <_ZN11CompositionD1Ev+0x36>
     3f6:	2c 97       	sbiw	r28, 0x0c	; 12
	note_index = 0; // init
	comp_length = 0; // init

}

Composition::~Composition() {
     3f8:	e8 81       	ld	r30, Y
     3fa:	f9 81       	ldd	r31, Y+1	; 0x01
     3fc:	01 90       	ld	r0, Z+
     3fe:	f0 81       	ld	r31, Z
     400:	e0 2d       	mov	r30, r0
     402:	ce 01       	movw	r24, r28
     404:	09 95       	icall

}
     406:	f4 cf       	rjmp	.-24     	; 0x3f0 <_ZN11CompositionD1Ev+0x1e>
     408:	df 91       	pop	r29
     40a:	cf 91       	pop	r28
     40c:	1f 91       	pop	r17
     40e:	0f 91       	pop	r16
     410:	08 95       	ret

00000412 <_ZN11CompositionD0Ev>:
	note_index = 0; // init
	comp_length = 0; // init

}

Composition::~Composition() {
     412:	cf 93       	push	r28
     414:	df 93       	push	r29
     416:	ec 01       	movw	r28, r24

}
     418:	0e 94 e9 01 	call	0x3d2	; 0x3d2 <_ZN11CompositionD1Ev>
     41c:	ce 01       	movw	r24, r28
     41e:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZdlPv>
     422:	df 91       	pop	r29
     424:	cf 91       	pop	r28
     426:	08 95       	ret

00000428 <_ZN11CompositionC1Ev>:
 *      Author: scott
 */

#include "Composition.h"

Composition::Composition() {
     428:	ef 92       	push	r14
     42a:	ff 92       	push	r15
     42c:	0f 93       	push	r16
     42e:	1f 93       	push	r17
     430:	cf 93       	push	r28
     432:	df 93       	push	r29
     434:	8c 01       	movw	r16, r24
     436:	88 e3       	ldi	r24, 0x38	; 56
     438:	91 e0       	ldi	r25, 0x01	; 1
     43a:	f8 01       	movw	r30, r16
     43c:	81 93       	st	Z+, r24
     43e:	91 93       	st	Z+, r25
     440:	7f 01       	movw	r14, r30
     442:	c0 e0       	ldi	r28, 0x00	; 0
     444:	d0 e0       	ldi	r29, 0x00	; 0
     446:	c7 01       	movw	r24, r14
     448:	8c 0f       	add	r24, r28
     44a:	9d 1f       	adc	r25, r29
     44c:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN4NoteC1Ev>
     450:	2c 96       	adiw	r28, 0x0c	; 12
     452:	c8 37       	cpi	r28, 0x78	; 120
     454:	d1 05       	cpc	r29, r1
     456:	b9 f7       	brne	.-18     	; 0x446 <_ZN11CompositionC1Ev+0x1e>
	note_index = 0; // init
     458:	f8 01       	movw	r30, r16
     45a:	ec 55       	subi	r30, 0x5C	; 92
     45c:	ff 4f       	sbci	r31, 0xFF	; 255
     45e:	11 82       	std	Z+1, r1	; 0x01
     460:	10 82       	st	Z, r1
	comp_length = 0; // init
     462:	f8 01       	movw	r30, r16
     464:	ea 55       	subi	r30, 0x5A	; 90
     466:	ff 4f       	sbci	r31, 0xFF	; 255
     468:	11 82       	std	Z+1, r1	; 0x01
     46a:	10 82       	st	Z, r1

}
     46c:	df 91       	pop	r29
     46e:	cf 91       	pop	r28
     470:	1f 91       	pop	r17
     472:	0f 91       	pop	r16
     474:	ff 90       	pop	r15
     476:	ef 90       	pop	r14
     478:	08 95       	ret

0000047a <_ZN11Composition9sortNotesEv>:
	comp_length = note_index;
	note_index = 0; // worth reseting?

}

void Composition::sortNotes(){
     47a:	fc 01       	movw	r30, r24
     47c:	e6 58       	subi	r30, 0x86	; 134
     47e:	ff 4f       	sbci	r31, 0xFF	; 255
     480:	dc 01       	movw	r26, r24
     482:	ac 01       	movw	r20, r24
     484:	4e 55       	subi	r20, 0x5E	; 94
     486:	5f 4f       	sbci	r21, 0xFF	; 255

	// Thinkng ahead, when the notes are accessed by the painter function, will we want to use the note type?

	for(int i = 0; i < COMP_LENGTH; i++){ // clear everything
		for(int j = 0; j < BARS; j++){
			sorted_notes[i][j] = &notes[0]; // first note is dummy note!
     488:	9c 01       	movw	r18, r24
     48a:	2e 5f       	subi	r18, 0xFE	; 254
     48c:	3f 4f       	sbci	r19, 0xFF	; 255
     48e:	31 83       	std	Z+1, r19	; 0x01
     490:	20 83       	st	Z, r18
     492:	33 83       	std	Z+3, r19	; 0x03
     494:	22 83       	std	Z+2, r18	; 0x02
     496:	34 96       	adiw	r30, 0x04	; 4
	//	Or pointers to the notes could be sorted... this is easily adjusted if wrong. Let's do *'s
	// To sort through these, we will be accessing the Note params (timestamp and bar).

	// Thinkng ahead, when the notes are accessed by the painter function, will we want to use the note type?

	for(int i = 0; i < COMP_LENGTH; i++){ // clear everything
     498:	e4 17       	cp	r30, r20
     49a:	f5 07       	cpc	r31, r21
     49c:	c1 f7       	brne	.-16     	; 0x48e <_ZN11Composition9sortNotesEv+0x14>
		for(int j = 0; j < BARS; j++){
			sorted_notes[i][j] = &notes[0]; // first note is dummy note!
		}
	}

	for(int i = 0; i < comp_length; i++){
     49e:	fc 01       	movw	r30, r24
     4a0:	ea 55       	subi	r30, 0x5A	; 90
     4a2:	ff 4f       	sbci	r31, 0xFF	; 255
     4a4:	60 81       	ld	r22, Z
     4a6:	71 81       	ldd	r23, Z+1	; 0x01
     4a8:	40 e0       	ldi	r20, 0x00	; 0
     4aa:	50 e0       	ldi	r21, 0x00	; 0
     4ac:	23 c0       	rjmp	.+70     	; 0x4f4 <_ZN11Composition9sortNotesEv+0x7a>
		Note* note;
		note = &notes[i];

		sorted_notes[note->getTimestamp()][note->getBar()] = note; // the address to the pointer array, right?
     4ae:	16 96       	adiw	r26, 0x06	; 6
     4b0:	ed 91       	ld	r30, X+
     4b2:	fc 91       	ld	r31, X
     4b4:	17 97       	sbiw	r26, 0x07	; 7
     4b6:	ee 0f       	add	r30, r30
     4b8:	ff 1f       	adc	r31, r31
     4ba:	1a 96       	adiw	r26, 0x0a	; 10
     4bc:	2d 91       	ld	r18, X+
     4be:	3c 91       	ld	r19, X
     4c0:	1b 97       	sbiw	r26, 0x0b	; 11
     4c2:	e2 0f       	add	r30, r18
     4c4:	f3 1f       	adc	r31, r19
     4c6:	fd 96       	adiw	r30, 0x3d	; 61
     4c8:	ee 0f       	add	r30, r30
     4ca:	ff 1f       	adc	r31, r31
     4cc:	e8 0f       	add	r30, r24
     4ce:	f9 1f       	adc	r31, r25
		}
	}

	for(int i = 0; i < comp_length; i++){
		Note* note;
		note = &notes[i];
     4d0:	9a 01       	movw	r18, r20
     4d2:	22 0f       	add	r18, r18
     4d4:	33 1f       	adc	r19, r19
     4d6:	24 0f       	add	r18, r20
     4d8:	35 1f       	adc	r19, r21
     4da:	22 0f       	add	r18, r18
     4dc:	33 1f       	adc	r19, r19
     4de:	22 0f       	add	r18, r18
     4e0:	33 1f       	adc	r19, r19
     4e2:	2e 5f       	subi	r18, 0xFE	; 254
     4e4:	3f 4f       	sbci	r19, 0xFF	; 255
     4e6:	28 0f       	add	r18, r24
     4e8:	39 1f       	adc	r19, r25

		sorted_notes[note->getTimestamp()][note->getBar()] = note; // the address to the pointer array, right?
     4ea:	31 83       	std	Z+1, r19	; 0x01
     4ec:	20 83       	st	Z, r18
		for(int j = 0; j < BARS; j++){
			sorted_notes[i][j] = &notes[0]; // first note is dummy note!
		}
	}

	for(int i = 0; i < comp_length; i++){
     4ee:	4f 5f       	subi	r20, 0xFF	; 255
     4f0:	5f 4f       	sbci	r21, 0xFF	; 255
     4f2:	1c 96       	adiw	r26, 0x0c	; 12
     4f4:	46 17       	cp	r20, r22
     4f6:	57 07       	cpc	r21, r23
     4f8:	d4 f2       	brlt	.-76     	; 0x4ae <_ZN11Composition9sortNotesEv+0x34>

		sorted_notes[note->getTimestamp()][note->getBar()] = note; // the address to the pointer array, right?
		// the above address will disapear...
	}

}
     4fa:	08 95       	ret

000004fc <_ZN11Composition9buildnoteEPi>:

void Composition::buildnote(int *array){
     4fc:	9f 92       	push	r9
     4fe:	af 92       	push	r10
     500:	bf 92       	push	r11
     502:	cf 92       	push	r12
     504:	df 92       	push	r13
     506:	ef 92       	push	r14
     508:	ff 92       	push	r15
     50a:	0f 93       	push	r16
     50c:	1f 93       	push	r17
     50e:	df 93       	push	r29
     510:	cf 93       	push	r28
     512:	cd b7       	in	r28, 0x3d	; 61
     514:	de b7       	in	r29, 0x3e	; 62
     516:	2e 97       	sbiw	r28, 0x0e	; 14
     518:	0f b6       	in	r0, 0x3f	; 63
     51a:	f8 94       	cli
     51c:	de bf       	out	0x3e, r29	; 62
     51e:	0f be       	out	0x3f, r0	; 63
     520:	cd bf       	out	0x3d, r28	; 61
     522:	7c 01       	movw	r14, r24
	Note note;
     524:	6e 01       	movw	r12, r28
     526:	08 94       	sec
     528:	c1 1c       	adc	r12, r1
     52a:	d1 1c       	adc	r13, r1
     52c:	c6 01       	movw	r24, r12
     52e:	6d 87       	std	Y+13, r22	; 0x0d
     530:	7e 87       	std	Y+14, r23	; 0x0e
     532:	0e 94 35 04 	call	0x86a	; 0x86a <_ZN4NoteC1Ev>
     536:	6d 85       	ldd	r22, Y+13	; 0x0d
     538:	7e 85       	ldd	r23, Y+14	; 0x0e
     53a:	a6 2e       	mov	r10, r22
     53c:	b7 2e       	mov	r11, r23

	for(int i = 0; i < NOTEPROPS; i++){
     53e:	00 e0       	ldi	r16, 0x00	; 0
     540:	10 e0       	ldi	r17, 0x00	; 0
		note.build (*(array+i));
     542:	9c 2c       	mov	r9, r12
     544:	cd 2c       	mov	r12, r13
     546:	f5 01       	movw	r30, r10
     548:	61 91       	ld	r22, Z+
     54a:	71 91       	ld	r23, Z+
     54c:	5f 01       	movw	r10, r30
     54e:	89 2d       	mov	r24, r9
     550:	9c 2d       	mov	r25, r12
     552:	0e 94 3d 04 	call	0x87a	; 0x87a <_ZN4Note5buildEi>
}

void Composition::buildnote(int *array){
	Note note;

	for(int i = 0; i < NOTEPROPS; i++){
     556:	0f 5f       	subi	r16, 0xFF	; 255
     558:	1f 4f       	sbci	r17, 0xFF	; 255
     55a:	04 30       	cpi	r16, 0x04	; 4
     55c:	11 05       	cpc	r17, r1
     55e:	99 f7       	brne	.-26     	; 0x546 <_ZN11Composition9buildnoteEPi+0x4a>
		note.build (*(array+i));
	}

	notes[note_index++] = note;
     560:	f7 01       	movw	r30, r14
     562:	ec 55       	subi	r30, 0x5C	; 92
     564:	ff 4f       	sbci	r31, 0xFF	; 255
     566:	80 81       	ld	r24, Z
     568:	91 81       	ldd	r25, Z+1	; 0x01
     56a:	9c 01       	movw	r18, r24
     56c:	2f 5f       	subi	r18, 0xFF	; 255
     56e:	3f 4f       	sbci	r19, 0xFF	; 255
     570:	31 83       	std	Z+1, r19	; 0x01
     572:	20 83       	st	Z, r18
 */

#ifndef NOTE_H_
#define NOTE_H_

class Note {
     574:	fc 01       	movw	r30, r24
     576:	ee 0f       	add	r30, r30
     578:	ff 1f       	adc	r31, r31
     57a:	e8 0f       	add	r30, r24
     57c:	f9 1f       	adc	r31, r25
     57e:	ee 0f       	add	r30, r30
     580:	ff 1f       	adc	r31, r31
     582:	ee 0f       	add	r30, r30
     584:	ff 1f       	adc	r31, r31
     586:	ee 0d       	add	r30, r14
     588:	ff 1d       	adc	r31, r15
     58a:	34 96       	adiw	r30, 0x04	; 4
     58c:	de 01       	movw	r26, r28
     58e:	13 96       	adiw	r26, 0x03	; 3
     590:	28 e0       	ldi	r18, 0x08	; 8
     592:	0d 90       	ld	r0, X+
     594:	01 92       	st	Z+, r0
     596:	21 50       	subi	r18, 0x01	; 1
     598:	e1 f7       	brne	.-8      	; 0x592 <_ZN11Composition9buildnoteEPi+0x96>
     59a:	01 96       	adiw	r24, 0x01	; 1
     59c:	fc 01       	movw	r30, r24
     59e:	ee 0f       	add	r30, r30
     5a0:	ff 1f       	adc	r31, r31
     5a2:	e8 0f       	add	r30, r24
     5a4:	f9 1f       	adc	r31, r25
     5a6:	ee 0f       	add	r30, r30
     5a8:	ff 1f       	adc	r31, r31
     5aa:	ee 0f       	add	r30, r30
     5ac:	ff 1f       	adc	r31, r31
     5ae:	ee 0d       	add	r30, r14
     5b0:	ff 1d       	adc	r31, r15
     5b2:	8b 85       	ldd	r24, Y+11	; 0x0b
     5b4:	9c 85       	ldd	r25, Y+12	; 0x0c
     5b6:	91 83       	std	Z+1, r25	; 0x01
     5b8:	80 83       	st	Z, r24
	}

}

void Composition::buildnote(int *array){
	Note note;
     5ba:	ce 01       	movw	r24, r28
     5bc:	01 96       	adiw	r24, 0x01	; 1
     5be:	0e 94 27 04 	call	0x84e	; 0x84e <_ZN4NoteD1Ev>
	for(int i = 0; i < NOTEPROPS; i++){
		note.build (*(array+i));
	}

	notes[note_index++] = note;
}
     5c2:	2e 96       	adiw	r28, 0x0e	; 14
     5c4:	0f b6       	in	r0, 0x3f	; 63
     5c6:	f8 94       	cli
     5c8:	de bf       	out	0x3e, r29	; 62
     5ca:	0f be       	out	0x3f, r0	; 63
     5cc:	cd bf       	out	0x3d, r28	; 61
     5ce:	cf 91       	pop	r28
     5d0:	df 91       	pop	r29
     5d2:	1f 91       	pop	r17
     5d4:	0f 91       	pop	r16
     5d6:	ff 90       	pop	r15
     5d8:	ef 90       	pop	r14
     5da:	df 90       	pop	r13
     5dc:	cf 90       	pop	r12
     5de:	bf 90       	pop	r11
     5e0:	af 90       	pop	r10
     5e2:	9f 90       	pop	r9
     5e4:	08 95       	ret

000005e6 <_ZN11Composition17getNoteBuildValueEPc>:

	return array;
}

int Composition::getNoteBuildValue(char *array){
	int value = 0, i = 0;
     5e6:	86 2f       	mov	r24, r22
     5e8:	97 2f       	mov	r25, r23
     5ea:	fc 01       	movw	r30, r24
     5ec:	20 e0       	ldi	r18, 0x00	; 0
     5ee:	30 e0       	ldi	r19, 0x00	; 0
	char c;

	while ((c = array[i++]) != ' ' && c != '\n') { // seperated by a space
     5f0:	81 91       	ld	r24, Z+
     5f2:	80 32       	cpi	r24, 0x20	; 32
     5f4:	a9 f0       	breq	.+42     	; 0x620 <_ZN11Composition17getNoteBuildValueEPc+0x3a>
     5f6:	8a 30       	cpi	r24, 0x0A	; 10
     5f8:	99 f0       	breq	.+38     	; 0x620 <_ZN11Composition17getNoteBuildValueEPc+0x3a>
		value = 10 * value + (c - '0'); // c - '0' is crucial. shit.
     5fa:	a9 01       	movw	r20, r18
     5fc:	44 0f       	add	r20, r20
     5fe:	55 1f       	adc	r21, r21
     600:	a3 e0       	ldi	r26, 0x03	; 3
     602:	22 0f       	add	r18, r18
     604:	33 1f       	adc	r19, r19
     606:	aa 95       	dec	r26
     608:	e1 f7       	brne	.-8      	; 0x602 <_ZN11Composition17getNoteBuildValueEPc+0x1c>
     60a:	42 0f       	add	r20, r18
     60c:	53 1f       	adc	r21, r19
     60e:	28 2f       	mov	r18, r24
     610:	33 27       	eor	r19, r19
     612:	27 fd       	sbrc	r18, 7
     614:	30 95       	com	r19
     616:	20 53       	subi	r18, 0x30	; 48
     618:	30 40       	sbci	r19, 0x00	; 0
     61a:	24 0f       	add	r18, r20
     61c:	35 1f       	adc	r19, r21
     61e:	e8 cf       	rjmp	.-48     	; 0x5f0 <_ZN11Composition17getNoteBuildValueEPc+0xa>
	}

	return value;
}
     620:	c9 01       	movw	r24, r18
     622:	08 95       	ret

00000624 <_ZN11Composition11createNotesEv>:
void Composition::readSheetMusic(char *array){
	sheet = array;
	createNotes();
}

void Composition::createNotes(){
     624:	8f 92       	push	r8
     626:	9f 92       	push	r9
     628:	af 92       	push	r10
     62a:	bf 92       	push	r11
     62c:	cf 92       	push	r12
     62e:	df 92       	push	r13
     630:	ef 92       	push	r14
     632:	ff 92       	push	r15
     634:	0f 93       	push	r16
     636:	1f 93       	push	r17
     638:	df 93       	push	r29
     63a:	cf 93       	push	r28
     63c:	cd b7       	in	r28, 0x3d	; 61
     63e:	de b7       	in	r29, 0x3e	; 62
     640:	60 97       	sbiw	r28, 0x10	; 16
     642:	0f b6       	in	r0, 0x3f	; 63
     644:	f8 94       	cli
     646:	de bf       	out	0x3e, r29	; 62
     648:	0f be       	out	0x3f, r0	; 63
     64a:	cd bf       	out	0x3d, r28	; 61
     64c:	8c 01       	movw	r16, r24

	int notebuilder[NOTEPROPS] = {0,0,0,0};
     64e:	88 e0       	ldi	r24, 0x08	; 8
     650:	5e 01       	movw	r10, r28
     652:	08 94       	sec
     654:	a1 1c       	adc	r10, r1
     656:	b1 1c       	adc	r11, r1
     658:	f5 01       	movw	r30, r10
     65a:	98 2f       	mov	r25, r24
     65c:	11 92       	st	Z+, r1
     65e:	9a 95       	dec	r25
     660:	e9 f7       	brne	.-6      	; 0x65c <_ZN11Composition11createNotesEv+0x38>
	int builder_index = 0;

	char c;
	int i = 0;

	int dummy[4] = {0,0,0,0};
     662:	be 01       	movw	r22, r28
     664:	67 5f       	subi	r22, 0xF7	; 247
     666:	7f 4f       	sbci	r23, 0xFF	; 255
     668:	fb 01       	movw	r30, r22
     66a:	11 92       	st	Z+, r1
     66c:	8a 95       	dec	r24
     66e:	e9 f7       	brne	.-6      	; 0x66a <_ZN11Composition11createNotesEv+0x46>
	buildnote(&dummy[0]);
     670:	c8 01       	movw	r24, r16
     672:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN11Composition9buildnoteEPi>

	int notebuilder[NOTEPROPS] = {0,0,0,0};
	int builder_index = 0;

	char c;
	int i = 0;
     676:	ee 24       	eor	r14, r14
     678:	ff 24       	eor	r15, r15
}

void Composition::createNotes(){

	int notebuilder[NOTEPROPS] = {0,0,0,0};
	int builder_index = 0;
     67a:	cc 24       	eor	r12, r12
     67c:	dd 24       	eor	r13, r13
	int i = 0;

	int dummy[4] = {0,0,0,0};
	buildnote(&dummy[0]);

	while ((c = sheet[i++]) != '\0') {
     67e:	32 ea       	ldi	r19, 0xA2	; 162
     680:	83 2e       	mov	r8, r19
     682:	91 2c       	mov	r9, r1
     684:	80 0e       	add	r8, r16
     686:	91 1e       	adc	r9, r17
     688:	26 c0       	rjmp	.+76     	; 0x6d6 <_ZN11Composition11createNotesEv+0xb2>
     68a:	08 94       	sec
     68c:	e1 1c       	adc	r14, r1
     68e:	f1 1c       	adc	r15, r1

		switch(c){
     690:	86 34       	cpi	r24, 0x46	; 70
     692:	59 f0       	breq	.+22     	; 0x6aa <_ZN11Composition11createNotesEv+0x86>
     694:	87 34       	cpi	r24, 0x47	; 71
     696:	2c f4       	brge	.+10     	; 0x6a2 <_ZN11Composition11createNotesEv+0x7e>
     698:	8a 30       	cpi	r24, 0x0A	; 10
     69a:	b9 f0       	breq	.+46     	; 0x6ca <_ZN11Composition11createNotesEv+0xa6>
     69c:	82 34       	cpi	r24, 0x42	; 66
     69e:	d9 f4       	brne	.+54     	; 0x6d6 <_ZN11Composition11createNotesEv+0xb2>
     6a0:	04 c0       	rjmp	.+8      	; 0x6aa <_ZN11Composition11createNotesEv+0x86>
     6a2:	8c 34       	cpi	r24, 0x4C	; 76
     6a4:	11 f0       	breq	.+4      	; 0x6aa <_ZN11Composition11createNotesEv+0x86>
     6a6:	84 35       	cpi	r24, 0x54	; 84
     6a8:	b1 f4       	brne	.+44     	; 0x6d6 <_ZN11Composition11createNotesEv+0xb2>
			case 'T':
			case 'L':
			case 'F':
			case 'B':
				notebuilder[builder_index++] = getNoteBuildValue(&sheet[i]);
     6aa:	6e 0d       	add	r22, r14
     6ac:	7f 1d       	adc	r23, r15
     6ae:	c8 01       	movw	r24, r16
     6b0:	0e 94 f3 02 	call	0x5e6	; 0x5e6 <_ZN11Composition17getNoteBuildValueEPc>
     6b4:	f6 01       	movw	r30, r12
     6b6:	ee 0f       	add	r30, r30
     6b8:	ff 1f       	adc	r31, r31
     6ba:	ea 0d       	add	r30, r10
     6bc:	fb 1d       	adc	r31, r11
     6be:	91 83       	std	Z+1, r25	; 0x01
     6c0:	80 83       	st	Z, r24
     6c2:	08 94       	sec
     6c4:	c1 1c       	adc	r12, r1
     6c6:	d1 1c       	adc	r13, r1
				break;
     6c8:	06 c0       	rjmp	.+12     	; 0x6d6 <_ZN11Composition11createNotesEv+0xb2>
			case '\n':
				builder_index = 0;
				buildnote(&notebuilder[0]);
     6ca:	c8 01       	movw	r24, r16
     6cc:	b5 01       	movw	r22, r10
     6ce:	0e 94 7e 02 	call	0x4fc	; 0x4fc <_ZN11Composition9buildnoteEPi>
			case 'F':
			case 'B':
				notebuilder[builder_index++] = getNoteBuildValue(&sheet[i]);
				break;
			case '\n':
				builder_index = 0;
     6d2:	cc 24       	eor	r12, r12
     6d4:	dd 24       	eor	r13, r13
	int i = 0;

	int dummy[4] = {0,0,0,0};
	buildnote(&dummy[0]);

	while ((c = sheet[i++]) != '\0') {
     6d6:	f4 01       	movw	r30, r8
     6d8:	60 81       	ld	r22, Z
     6da:	71 81       	ldd	r23, Z+1	; 0x01
     6dc:	fb 01       	movw	r30, r22
     6de:	ee 0d       	add	r30, r14
     6e0:	ff 1d       	adc	r31, r15
     6e2:	80 81       	ld	r24, Z
     6e4:	88 23       	and	r24, r24
     6e6:	89 f6       	brne	.-94     	; 0x68a <_ZN11Composition11createNotesEv+0x66>
		}

	}

	// AT this point, the text file has been read.
	comp_length = note_index;
     6e8:	d8 01       	movw	r26, r16
     6ea:	aa 55       	subi	r26, 0x5A	; 90
     6ec:	bf 4f       	sbci	r27, 0xFF	; 255
     6ee:	f8 01       	movw	r30, r16
     6f0:	ec 55       	subi	r30, 0x5C	; 92
     6f2:	ff 4f       	sbci	r31, 0xFF	; 255
     6f4:	80 81       	ld	r24, Z
     6f6:	91 81       	ldd	r25, Z+1	; 0x01
     6f8:	11 96       	adiw	r26, 0x01	; 1
     6fa:	9c 93       	st	X, r25
     6fc:	8e 93       	st	-X, r24
	note_index = 0; // worth reseting?
     6fe:	11 82       	std	Z+1, r1	; 0x01
     700:	10 82       	st	Z, r1

}
     702:	60 96       	adiw	r28, 0x10	; 16
     704:	0f b6       	in	r0, 0x3f	; 63
     706:	f8 94       	cli
     708:	de bf       	out	0x3e, r29	; 62
     70a:	0f be       	out	0x3f, r0	; 63
     70c:	cd bf       	out	0x3d, r28	; 61
     70e:	cf 91       	pop	r28
     710:	df 91       	pop	r29
     712:	1f 91       	pop	r17
     714:	0f 91       	pop	r16
     716:	ff 90       	pop	r15
     718:	ef 90       	pop	r14
     71a:	df 90       	pop	r13
     71c:	cf 90       	pop	r12
     71e:	bf 90       	pop	r11
     720:	af 90       	pop	r10
     722:	9f 90       	pop	r9
     724:	8f 90       	pop	r8
     726:	08 95       	ret

00000728 <_ZN11Composition14readSheetMusicEPc>:
Composition::~Composition() {

}

void Composition::readSheetMusic(char *array){
	sheet = array;
     728:	fc 01       	movw	r30, r24
     72a:	ee 55       	subi	r30, 0x5E	; 94
     72c:	ff 4f       	sbci	r31, 0xFF	; 255
     72e:	71 83       	std	Z+1, r23	; 0x01
     730:	60 83       	st	Z, r22
	createNotes();
     732:	0e 94 12 03 	call	0x624	; 0x624 <_ZN11Composition11createNotesEv>
}
     736:	08 95       	ret

00000738 <_ZN2IOD1Ev>:
IO::IO() {
	// TODO Auto-generated constructor stub

}

IO::~IO() {
     738:	20 e4       	ldi	r18, 0x40	; 64
     73a:	31 e0       	ldi	r19, 0x01	; 1
     73c:	fc 01       	movw	r30, r24
     73e:	31 83       	std	Z+1, r19	; 0x01
     740:	20 83       	st	Z, r18
	// TODO Auto-generated destructor stub
}
     742:	08 95       	ret

00000744 <_ZN2IOD0Ev>:
IO::IO() {
	// TODO Auto-generated constructor stub

}

IO::~IO() {
     744:	20 e4       	ldi	r18, 0x40	; 64
     746:	31 e0       	ldi	r19, 0x01	; 1
     748:	fc 01       	movw	r30, r24
     74a:	31 83       	std	Z+1, r19	; 0x01
     74c:	20 83       	st	Z, r18
	// TODO Auto-generated destructor stub
}
     74e:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZdlPv>
     752:	08 95       	ret

00000754 <_ZN2IOC1Ev>:

#include "IO.h"

IO inout;

IO::IO() {
     754:	cf 93       	push	r28
     756:	df 93       	push	r29
     758:	ec 01       	movw	r28, r24
     75a:	20 e4       	ldi	r18, 0x40	; 64
     75c:	31 e0       	ldi	r19, 0x01	; 1
     75e:	fc 01       	movw	r30, r24
     760:	21 93       	st	Z+, r18
     762:	31 93       	st	Z+, r19
     764:	cf 01       	movw	r24, r30
     766:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN13SoftwareServoC1Ev>
     76a:	ce 01       	movw	r24, r28
     76c:	0a 96       	adiw	r24, 0x0a	; 10
     76e:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN13SoftwareServoC1Ev>
     772:	ce 01       	movw	r24, r28
     774:	42 96       	adiw	r24, 0x12	; 18
     776:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN13SoftwareServoC1Ev>
	// TODO Auto-generated constructor stub

}
     77a:	df 91       	pop	r29
     77c:	cf 91       	pop	r28
     77e:	08 95       	ret

00000780 <_Z41__static_initialization_and_destruction_0ii.clone.0>:


	SoftwareServo::refresh();


}
     780:	81 30       	cpi	r24, 0x01	; 1
     782:	91 05       	cpc	r25, r1
     784:	29 f4       	brne	.+10     	; 0x790 <_Z41__static_initialization_and_destruction_0ii.clone.0+0x10>
 *      Author: scott
 */

#include "IO.h"

IO inout;
     786:	82 e7       	ldi	r24, 0x72	; 114
     788:	91 e0       	ldi	r25, 0x01	; 1
     78a:	0e 94 aa 03 	call	0x754	; 0x754 <_ZN2IOC1Ev>
     78e:	08 95       	ret
     790:	00 97       	sbiw	r24, 0x00	; 0
     792:	31 f4       	brne	.+12     	; 0x7a0 <_Z41__static_initialization_and_destruction_0ii.clone.0+0x20>
IO::IO() {
	// TODO Auto-generated constructor stub

}

IO::~IO() {
     794:	80 e4       	ldi	r24, 0x40	; 64
     796:	91 e0       	ldi	r25, 0x01	; 1
     798:	90 93 73 01 	sts	0x0173, r25
     79c:	80 93 72 01 	sts	0x0172, r24
     7a0:	08 95       	ret

000007a2 <_ZN2IO9addServosEv>:
	// TODO Auto-generated destructor stub
}

void IO::addServos(){
     7a2:	ef 92       	push	r14
     7a4:	ff 92       	push	r15
     7a6:	0f 93       	push	r16
     7a8:	1f 93       	push	r17
     7aa:	df 93       	push	r29
     7ac:	cf 93       	push	r28
     7ae:	cd b7       	in	r28, 0x3d	; 61
     7b0:	de b7       	in	r29, 0x3e	; 62
     7b2:	28 97       	sbiw	r28, 0x08	; 8
     7b4:	0f b6       	in	r0, 0x3f	; 63
     7b6:	f8 94       	cli
     7b8:	de bf       	out	0x3e, r29	; 62
     7ba:	0f be       	out	0x3f, r0	; 63
     7bc:	cd bf       	out	0x3d, r28	; 61
     7be:	7c 01       	movw	r14, r24
	int servo_pins[2] = {14,15};

	for(int i = 0; i < 2; i++){
		SoftwareServo servo;
     7c0:	8e 01       	movw	r16, r28
     7c2:	0f 5f       	subi	r16, 0xFF	; 255
     7c4:	1f 4f       	sbci	r17, 0xFF	; 255
     7c6:	c8 01       	movw	r24, r16
     7c8:	0e 94 8e 00 	call	0x11c	; 0x11c <_ZN13SoftwareServoC1Ev>
		servo.attach(servo_pins[i]);
     7cc:	c8 01       	movw	r24, r16
     7ce:	6e e0       	ldi	r22, 0x0E	; 14
     7d0:	70 e0       	ldi	r23, 0x00	; 0
     7d2:	0e 94 9b 00 	call	0x136	; 0x136 <_ZN13SoftwareServo6attachEi>

		servos[i++] = servo;
     7d6:	d7 01       	movw	r26, r14
     7d8:	12 96       	adiw	r26, 0x02	; 2
     7da:	f8 01       	movw	r30, r16
     7dc:	88 e0       	ldi	r24, 0x08	; 8
     7de:	01 90       	ld	r0, Z+
     7e0:	0d 92       	st	X+, r0
     7e2:	81 50       	subi	r24, 0x01	; 1
     7e4:	e1 f7       	brne	.-8      	; 0x7de <_ZN2IO9addServosEv+0x3c>
	}



	s.attach(11);
     7e6:	87 01       	movw	r16, r14
     7e8:	0e 5e       	subi	r16, 0xEE	; 238
     7ea:	1f 4f       	sbci	r17, 0xFF	; 255
     7ec:	c8 01       	movw	r24, r16
     7ee:	6b e0       	ldi	r22, 0x0B	; 11
     7f0:	70 e0       	ldi	r23, 0x00	; 0
     7f2:	0e 94 9b 00 	call	0x136	; 0x136 <_ZN13SoftwareServo6attachEi>
//	s.setMinimumPulse(100);
//	s.setMaximumPulse(2000);

	s.write(90);
     7f6:	c8 01       	movw	r24, r16
     7f8:	6a e5       	ldi	r22, 0x5A	; 90
     7fa:	70 e0       	ldi	r23, 0x00	; 0
     7fc:	0e 94 b9 00 	call	0x172	; 0x172 <_ZN13SoftwareServo5writeEi>
	SoftwareServo::refresh();
     800:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_ZN13SoftwareServo7refreshEv>
	delay(2000);
     804:	60 ed       	ldi	r22, 0xD0	; 208
     806:	77 e0       	ldi	r23, 0x07	; 7
     808:	80 e0       	ldi	r24, 0x00	; 0
     80a:	90 e0       	ldi	r25, 0x00	; 0
     80c:	0e 94 a3 07 	call	0xf46	; 0xf46 <delay>


}
     810:	28 96       	adiw	r28, 0x08	; 8
     812:	0f b6       	in	r0, 0x3f	; 63
     814:	f8 94       	cli
     816:	de bf       	out	0x3e, r29	; 62
     818:	0f be       	out	0x3f, r0	; 63
     81a:	cd bf       	out	0x3d, r28	; 61
     81c:	cf 91       	pop	r28
     81e:	df 91       	pop	r29
     820:	1f 91       	pop	r17
     822:	0f 91       	pop	r16
     824:	ff 90       	pop	r15
     826:	ef 90       	pop	r14
     828:	08 95       	ret

0000082a <_ZN2IO5writeEii>:
	SoftwareServo* servo;
	servo = &servos[i];

//	servo->write(val);

	s.write(0);
     82a:	42 96       	adiw	r24, 0x12	; 18
     82c:	60 e0       	ldi	r22, 0x00	; 0
     82e:	70 e0       	ldi	r23, 0x00	; 0
     830:	0e 94 b9 00 	call	0x172	; 0x172 <_ZN13SoftwareServo5writeEi>


	SoftwareServo::refresh();
     834:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <_ZN13SoftwareServo7refreshEv>


}
     838:	08 95       	ret

0000083a <_GLOBAL__I_inout>:
     83a:	81 e0       	ldi	r24, 0x01	; 1
     83c:	90 e0       	ldi	r25, 0x00	; 0
     83e:	0e 94 c0 03 	call	0x780	; 0x780 <_Z41__static_initialization_and_destruction_0ii.clone.0>
     842:	08 95       	ret

00000844 <_GLOBAL__D_inout>:
     844:	80 e0       	ldi	r24, 0x00	; 0
     846:	90 e0       	ldi	r25, 0x00	; 0
     848:	0e 94 c0 03 	call	0x780	; 0x780 <_Z41__static_initialization_and_destruction_0ii.clone.0>
     84c:	08 95       	ret

0000084e <_ZN4NoteD1Ev>:
	params.length = length;
	params.force = force;
	params.bar = bar;
}

Note::~Note() {
     84e:	28 e4       	ldi	r18, 0x48	; 72
     850:	31 e0       	ldi	r19, 0x01	; 1
     852:	fc 01       	movw	r30, r24
     854:	31 83       	std	Z+1, r19	; 0x01
     856:	20 83       	st	Z, r18

}
     858:	08 95       	ret

0000085a <_ZN4NoteD0Ev>:
	params.length = length;
	params.force = force;
	params.bar = bar;
}

Note::~Note() {
     85a:	28 e4       	ldi	r18, 0x48	; 72
     85c:	31 e0       	ldi	r19, 0x01	; 1
     85e:	fc 01       	movw	r30, r24
     860:	31 83       	std	Z+1, r19	; 0x01
     862:	20 83       	st	Z, r18

}
     864:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZdlPv>
     868:	08 95       	ret

0000086a <_ZN4NoteC1Ev>:
 *      Author: scott
 */

#include "Note.h"

Note::Note(){
     86a:	fc 01       	movw	r30, r24
     86c:	88 e4       	ldi	r24, 0x48	; 72
     86e:	91 e0       	ldi	r25, 0x01	; 1
     870:	91 83       	std	Z+1, r25	; 0x01
     872:	80 83       	st	Z, r24
	build_index = 0;
     874:	13 86       	std	Z+11, r1	; 0x0b
     876:	12 86       	std	Z+10, r1	; 0x0a
}
     878:	08 95       	ret

0000087a <_ZN4Note5buildEi>:
	}

	return 0;
}

void Note::build(int val){
     87a:	fc 01       	movw	r30, r24
	switch(build_index++){
     87c:	82 85       	ldd	r24, Z+10	; 0x0a
     87e:	93 85       	ldd	r25, Z+11	; 0x0b
     880:	9c 01       	movw	r18, r24
     882:	2f 5f       	subi	r18, 0xFF	; 255
     884:	3f 4f       	sbci	r19, 0xFF	; 255
     886:	33 87       	std	Z+11, r19	; 0x0b
     888:	22 87       	std	Z+10, r18	; 0x0a
     88a:	81 30       	cpi	r24, 0x01	; 1
     88c:	91 05       	cpc	r25, r1
     88e:	81 f0       	breq	.+32     	; 0x8b0 <_ZN4Note5buildEi+0x36>
     890:	82 30       	cpi	r24, 0x02	; 2
     892:	91 05       	cpc	r25, r1
     894:	1c f4       	brge	.+6      	; 0x89c <_ZN4Note5buildEi+0x22>
     896:	00 97       	sbiw	r24, 0x00	; 0
     898:	41 f0       	breq	.+16     	; 0x8aa <_ZN4Note5buildEi+0x30>
     89a:	08 95       	ret
     89c:	82 30       	cpi	r24, 0x02	; 2
     89e:	91 05       	cpc	r25, r1
     8a0:	51 f0       	breq	.+20     	; 0x8b6 <_ZN4Note5buildEi+0x3c>
     8a2:	83 30       	cpi	r24, 0x03	; 3
     8a4:	91 05       	cpc	r25, r1
     8a6:	61 f4       	brne	.+24     	; 0x8c0 <_ZN4Note5buildEi+0x46>
     8a8:	09 c0       	rjmp	.+18     	; 0x8bc <_ZN4Note5buildEi+0x42>
		case 0: params.timestamp = val;
     8aa:	75 83       	std	Z+5, r23	; 0x05
     8ac:	64 83       	std	Z+4, r22	; 0x04
			break;
     8ae:	08 95       	ret
		case 1:	 params.length = val;
     8b0:	73 83       	std	Z+3, r23	; 0x03
     8b2:	62 83       	std	Z+2, r22	; 0x02
			break;
     8b4:	08 95       	ret
		case 2: params.force = val;
     8b6:	77 83       	std	Z+7, r23	; 0x07
     8b8:	66 83       	std	Z+6, r22	; 0x06
			break;
     8ba:	08 95       	ret
		case 3: params.bar = val;
     8bc:	71 87       	std	Z+9, r23	; 0x09
     8be:	60 87       	std	Z+8, r22	; 0x08
     8c0:	08 95       	ret

000008c2 <main>:
// Do not remove the include below
#include "OTTO.h"

char array[] = "T1 L5 F33 B1\n T6 L22 F33 B0\n T4 L456 F789 B1\n";

int main(void){
     8c2:	ef 92       	push	r14
     8c4:	ff 92       	push	r15
     8c6:	0f 93       	push	r16
     8c8:	1f 93       	push	r17
     8ca:	df 93       	push	r29
     8cc:	cf 93       	push	r28
     8ce:	cd b7       	in	r28, 0x3d	; 61
     8d0:	de b7       	in	r29, 0x3e	; 62
     8d2:	c5 5b       	subi	r28, 0xB5	; 181
     8d4:	d0 40       	sbci	r29, 0x00	; 0
     8d6:	0f b6       	in	r0, 0x3f	; 63
     8d8:	f8 94       	cli
     8da:	de bf       	out	0x3e, r29	; 62
     8dc:	0f be       	out	0x3f, r0	; 63
     8de:	cd bf       	out	0x3d, r28	; 61

	init();
     8e0:	0e 94 ca 07 	call	0xf94	; 0xf94 <init>

	Serial.begin(9600);
     8e4:	84 e1       	ldi	r24, 0x14	; 20
     8e6:	92 e0       	ldi	r25, 0x02	; 2
     8e8:	40 e8       	ldi	r20, 0x80	; 128
     8ea:	55 e2       	ldi	r21, 0x25	; 37
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	70 e0       	ldi	r23, 0x00	; 0
     8f0:	0e 94 3f 06 	call	0xc7e	; 0xc7e <_ZN14HardwareSerial5beginEm>
	inout.addServos();
     8f4:	82 e7       	ldi	r24, 0x72	; 114
     8f6:	91 e0       	ldi	r25, 0x01	; 1
     8f8:	0e 94 d1 03 	call	0x7a2	; 0x7a2 <_ZN2IO9addServosEv>

	//io.addServos(servo_pins);


	Composition comp;
     8fc:	8e 01       	movw	r16, r28
     8fe:	02 5f       	subi	r16, 0xF2	; 242
     900:	1f 4f       	sbci	r17, 0xFF	; 255
     902:	c8 01       	movw	r24, r16
     904:	0e 94 14 02 	call	0x428	; 0x428 <_ZN11CompositionC1Ev>
	comp.readSheetMusic(array);
     908:	c8 01       	movw	r24, r16
     90a:	66 e0       	ldi	r22, 0x06	; 6
     90c:	71 e0       	ldi	r23, 0x01	; 1
     90e:	0e 94 94 03 	call	0x728	; 0x728 <_ZN11Composition14readSheetMusicEPc>
	comp.sortNotes();
     912:	c8 01       	movw	r24, r16
     914:	0e 94 3d 02 	call	0x47a	; 0x47a <_ZN11Composition9sortNotesEv>

	Composition* comp_pointer;
	comp_pointer = &comp;

	Timeline timeline;
     918:	7e 01       	movw	r14, r28
     91a:	08 94       	sec
     91c:	e1 1c       	adc	r14, r1
     91e:	f1 1c       	adc	r15, r1
     920:	c7 01       	movw	r24, r14
     922:	0e 94 bc 04 	call	0x978	; 0x978 <_ZN8TimelineC1Ev>
	timeline.loadComposition(comp_pointer); // Can't just send the address of the comp. Needs to be a pointer to the address
     926:	c7 01       	movw	r24, r14
     928:	b8 01       	movw	r22, r16
     92a:	0e 94 f8 04 	call	0x9f0	; 0x9f0 <_ZN8Timeline15loadCompositionEP11Composition>
class Timeline {
public:
	Timeline();
	virtual ~Timeline();

	void start() {global_timer = 0; active = true; time = 0;}
     92e:	1a 86       	std	Y+10, r1	; 0x0a
     930:	19 86       	std	Y+9, r1	; 0x09
     932:	81 e0       	ldi	r24, 0x01	; 1
     934:	8d 87       	std	Y+13, r24	; 0x0d
     936:	1c 86       	std	Y+12, r1	; 0x0c
     938:	1b 86       	std	Y+11, r1	; 0x0b

	for(;;){

	//	timeline.run();

		inout.write(0,180);
     93a:	82 e7       	ldi	r24, 0x72	; 114
     93c:	91 e0       	ldi	r25, 0x01	; 1
     93e:	60 e0       	ldi	r22, 0x00	; 0
     940:	70 e0       	ldi	r23, 0x00	; 0
     942:	44 eb       	ldi	r20, 0xB4	; 180
     944:	50 e0       	ldi	r21, 0x00	; 0
     946:	0e 94 15 04 	call	0x82a	; 0x82a <_ZN2IO5writeEii>
		inout.write(1,0);
     94a:	82 e7       	ldi	r24, 0x72	; 114
     94c:	91 e0       	ldi	r25, 0x01	; 1
     94e:	61 e0       	ldi	r22, 0x01	; 1
     950:	70 e0       	ldi	r23, 0x00	; 0
     952:	40 e0       	ldi	r20, 0x00	; 0
     954:	50 e0       	ldi	r21, 0x00	; 0
     956:	0e 94 15 04 	call	0x82a	; 0x82a <_ZN2IO5writeEii>
     95a:	ef cf       	rjmp	.-34     	; 0x93a <__stack+0x3b>

0000095c <_ZN8TimelineD1Ev>:

	active = false;

}

Timeline::~Timeline() {
     95c:	20 e5       	ldi	r18, 0x50	; 80
     95e:	31 e0       	ldi	r19, 0x01	; 1
     960:	fc 01       	movw	r30, r24
     962:	31 83       	std	Z+1, r19	; 0x01
     964:	20 83       	st	Z, r18

}
     966:	08 95       	ret

00000968 <_ZN8TimelineD0Ev>:

	active = false;

}

Timeline::~Timeline() {
     968:	20 e5       	ldi	r18, 0x50	; 80
     96a:	31 e0       	ldi	r19, 0x01	; 1
     96c:	fc 01       	movw	r30, r24
     96e:	31 83       	std	Z+1, r19	; 0x01
     970:	20 83       	st	Z, r18

}
     972:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZdlPv>
     976:	08 95       	ret

00000978 <_ZN8TimelineC1Ev>:
 *      Author: scott
 */

#include "Timeline.h"

Timeline::Timeline() {
     978:	ef 92       	push	r14
     97a:	ff 92       	push	r15
     97c:	0f 93       	push	r16
     97e:	1f 93       	push	r17
     980:	df 93       	push	r29
     982:	cf 93       	push	r28
     984:	cd b7       	in	r28, 0x3d	; 61
     986:	de b7       	in	r29, 0x3e	; 62
     988:	2a 97       	sbiw	r28, 0x0a	; 10
     98a:	0f b6       	in	r0, 0x3f	; 63
     98c:	f8 94       	cli
     98e:	de bf       	out	0x3e, r29	; 62
     990:	0f be       	out	0x3f, r0	; 63
     992:	cd bf       	out	0x3d, r28	; 61
     994:	7c 01       	movw	r14, r24
     996:	80 e5       	ldi	r24, 0x50	; 80
     998:	91 e0       	ldi	r25, 0x01	; 1
     99a:	f7 01       	movw	r30, r14
     99c:	91 83       	std	Z+1, r25	; 0x01
     99e:	80 83       	st	Z, r24
	// Prepare the performers
	for(int i = 0; i < BARS; i++){ // foreach bar a writer to be initalized
		Writer writer (i);
     9a0:	8e 01       	movw	r16, r28
     9a2:	0f 5f       	subi	r16, 0xFF	; 255
     9a4:	1f 4f       	sbci	r17, 0xFF	; 255
     9a6:	c8 01       	movw	r24, r16
     9a8:	60 e0       	ldi	r22, 0x00	; 0
     9aa:	70 e0       	ldi	r23, 0x00	; 0
     9ac:	0e 94 0a 05 	call	0xa14	; 0xa14 <_ZN6WriterC1Ei>
		writers[i] = &writer;
     9b0:	f7 01       	movw	r30, r14
     9b2:	15 83       	std	Z+5, r17	; 0x05
     9b4:	04 83       	std	Z+4, r16	; 0x04
#include "Timeline.h"

Timeline::Timeline() {
	// Prepare the performers
	for(int i = 0; i < BARS; i++){ // foreach bar a writer to be initalized
		Writer writer (i);
     9b6:	c8 01       	movw	r24, r16
     9b8:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_ZN6WriterD1Ev>
     9bc:	c8 01       	movw	r24, r16
     9be:	61 e0       	ldi	r22, 0x01	; 1
     9c0:	70 e0       	ldi	r23, 0x00	; 0
     9c2:	0e 94 0a 05 	call	0xa14	; 0xa14 <_ZN6WriterC1Ei>
		writers[i] = &writer;
     9c6:	f7 01       	movw	r30, r14
     9c8:	17 83       	std	Z+7, r17	; 0x07
     9ca:	06 83       	std	Z+6, r16	; 0x06
#include "Timeline.h"

Timeline::Timeline() {
	// Prepare the performers
	for(int i = 0; i < BARS; i++){ // foreach bar a writer to be initalized
		Writer writer (i);
     9cc:	c8 01       	movw	r24, r16
     9ce:	0e 94 fc 04 	call	0x9f8	; 0x9f8 <_ZN6WriterD1Ev>
		writers[i] = &writer;
	}

	active = false;
     9d2:	f7 01       	movw	r30, r14
     9d4:	14 86       	std	Z+12, r1	; 0x0c

}
     9d6:	2a 96       	adiw	r28, 0x0a	; 10
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	de bf       	out	0x3e, r29	; 62
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	cd bf       	out	0x3d, r28	; 61
     9e2:	cf 91       	pop	r28
     9e4:	df 91       	pop	r29
     9e6:	1f 91       	pop	r17
     9e8:	0f 91       	pop	r16
     9ea:	ff 90       	pop	r15
     9ec:	ef 90       	pop	r14
     9ee:	08 95       	ret

000009f0 <_ZN8Timeline15loadCompositionEP11Composition>:
Timeline::~Timeline() {

}

void Timeline::loadComposition(Composition *comp){
	this->comp = comp;
     9f0:	fc 01       	movw	r30, r24
     9f2:	73 83       	std	Z+3, r23	; 0x03
     9f4:	62 83       	std	Z+2, r22	; 0x02
}
     9f6:	08 95       	ret

000009f8 <_ZN6WriterD1Ev>:
	params.timestamp = 0;
	this->id = id;

}

Writer::~Writer() {
     9f8:	28 e5       	ldi	r18, 0x58	; 88
     9fa:	31 e0       	ldi	r19, 0x01	; 1
     9fc:	fc 01       	movw	r30, r24
     9fe:	31 83       	std	Z+1, r19	; 0x01
     a00:	20 83       	st	Z, r18
	// TODO Auto-generated destructor stub
}
     a02:	08 95       	ret

00000a04 <_ZN6WriterD0Ev>:
	params.timestamp = 0;
	this->id = id;

}

Writer::~Writer() {
     a04:	28 e5       	ldi	r18, 0x58	; 88
     a06:	31 e0       	ldi	r19, 0x01	; 1
     a08:	fc 01       	movw	r30, r24
     a0a:	31 83       	std	Z+1, r19	; 0x01
     a0c:	20 83       	st	Z, r18
	// TODO Auto-generated destructor stub
}
     a0e:	0e 94 24 07 	call	0xe48	; 0xe48 <_ZdlPv>
     a12:	08 95       	ret

00000a14 <_ZN6WriterC1Ei>:
 *      Author: scott
 */

#include "Writer.h"

Writer::Writer(int id) {
     a14:	fc 01       	movw	r30, r24
     a16:	88 e5       	ldi	r24, 0x58	; 88
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	91 83       	std	Z+1, r25	; 0x01
     a1c:	80 83       	st	Z, r24
	// TODO Auto-generated constructor stub
	params.length = 0;
     a1e:	13 82       	std	Z+3, r1	; 0x03
     a20:	12 82       	std	Z+2, r1	; 0x02
	params.force = 0;
     a22:	17 82       	std	Z+7, r1	; 0x07
     a24:	16 82       	std	Z+6, r1	; 0x06
	params.timestamp = 0;
     a26:	15 82       	std	Z+5, r1	; 0x05
     a28:	14 82       	std	Z+4, r1	; 0x04
	this->id = id;
     a2a:	71 87       	std	Z+9, r23	; 0x09
     a2c:	60 87       	std	Z+8, r22	; 0x08

}
     a2e:	08 95       	ret

00000a30 <_ZN14HardwareSerial9availableEv>:
  _rx_buffer->head = _rx_buffer->tail;
}

int HardwareSerial::available(void)
{
  return (unsigned int)(SERIAL_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % SERIAL_BUFFER_SIZE;
     a30:	fc 01       	movw	r30, r24
     a32:	84 85       	ldd	r24, Z+12	; 0x0c
     a34:	95 85       	ldd	r25, Z+13	; 0x0d
     a36:	fc 01       	movw	r30, r24
     a38:	e0 5c       	subi	r30, 0xC0	; 192
     a3a:	ff 4f       	sbci	r31, 0xFF	; 255
     a3c:	20 81       	ld	r18, Z
     a3e:	31 81       	ldd	r19, Z+1	; 0x01
     a40:	8e 5b       	subi	r24, 0xBE	; 190
     a42:	9f 4f       	sbci	r25, 0xFF	; 255
     a44:	fc 01       	movw	r30, r24
     a46:	80 81       	ld	r24, Z
     a48:	91 81       	ldd	r25, Z+1	; 0x01
     a4a:	28 1b       	sub	r18, r24
     a4c:	39 0b       	sbc	r19, r25
     a4e:	2f 73       	andi	r18, 0x3F	; 63
     a50:	30 70       	andi	r19, 0x00	; 0
}
     a52:	c9 01       	movw	r24, r18
     a54:	08 95       	ret

00000a56 <_ZN14HardwareSerial4peekEv>:

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
     a56:	fc 01       	movw	r30, r24
     a58:	84 85       	ldd	r24, Z+12	; 0x0c
     a5a:	95 85       	ldd	r25, Z+13	; 0x0d
     a5c:	fc 01       	movw	r30, r24
     a5e:	e0 5c       	subi	r30, 0xC0	; 192
     a60:	ff 4f       	sbci	r31, 0xFF	; 255
     a62:	40 81       	ld	r20, Z
     a64:	51 81       	ldd	r21, Z+1	; 0x01
     a66:	fc 01       	movw	r30, r24
     a68:	ee 5b       	subi	r30, 0xBE	; 190
     a6a:	ff 4f       	sbci	r31, 0xFF	; 255
     a6c:	20 81       	ld	r18, Z
     a6e:	31 81       	ldd	r19, Z+1	; 0x01
     a70:	42 17       	cp	r20, r18
     a72:	53 07       	cpc	r21, r19
     a74:	41 f0       	breq	.+16     	; 0xa86 <_ZN14HardwareSerial4peekEv+0x30>
    return -1;
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
     a76:	01 90       	ld	r0, Z+
     a78:	f0 81       	ld	r31, Z
     a7a:	e0 2d       	mov	r30, r0
     a7c:	e8 0f       	add	r30, r24
     a7e:	f9 1f       	adc	r31, r25
     a80:	20 81       	ld	r18, Z
     a82:	30 e0       	ldi	r19, 0x00	; 0
     a84:	02 c0       	rjmp	.+4      	; 0xa8a <_ZN14HardwareSerial4peekEv+0x34>
}

int HardwareSerial::peek(void)
{
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     a86:	2f ef       	ldi	r18, 0xFF	; 255
     a88:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    return _rx_buffer->buffer[_rx_buffer->tail];
  }
}
     a8a:	c9 01       	movw	r24, r18
     a8c:	08 95       	ret

00000a8e <_ZN14HardwareSerial4readEv>:

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
     a8e:	fc 01       	movw	r30, r24
     a90:	84 85       	ldd	r24, Z+12	; 0x0c
     a92:	95 85       	ldd	r25, Z+13	; 0x0d
     a94:	fc 01       	movw	r30, r24
     a96:	e0 5c       	subi	r30, 0xC0	; 192
     a98:	ff 4f       	sbci	r31, 0xFF	; 255
     a9a:	40 81       	ld	r20, Z
     a9c:	51 81       	ldd	r21, Z+1	; 0x01
     a9e:	fc 01       	movw	r30, r24
     aa0:	ee 5b       	subi	r30, 0xBE	; 190
     aa2:	ff 4f       	sbci	r31, 0xFF	; 255
     aa4:	20 81       	ld	r18, Z
     aa6:	31 81       	ldd	r19, Z+1	; 0x01
     aa8:	42 17       	cp	r20, r18
     aaa:	53 07       	cpc	r21, r19
     aac:	71 f0       	breq	.+28     	; 0xaca <_ZN14HardwareSerial4readEv+0x3c>
    return -1;
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
     aae:	a0 81       	ld	r26, Z
     ab0:	b1 81       	ldd	r27, Z+1	; 0x01
     ab2:	a8 0f       	add	r26, r24
     ab4:	b9 1f       	adc	r27, r25
     ab6:	2c 91       	ld	r18, X
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
     ab8:	80 81       	ld	r24, Z
     aba:	91 81       	ldd	r25, Z+1	; 0x01
     abc:	01 96       	adiw	r24, 0x01	; 1
     abe:	8f 73       	andi	r24, 0x3F	; 63
     ac0:	90 70       	andi	r25, 0x00	; 0
     ac2:	91 83       	std	Z+1, r25	; 0x01
     ac4:	80 83       	st	Z, r24
    return c;
     ac6:	30 e0       	ldi	r19, 0x00	; 0
     ac8:	02 c0       	rjmp	.+4      	; 0xace <_ZN14HardwareSerial4readEv+0x40>

int HardwareSerial::read(void)
{
  // if the head isn't ahead of the tail, we don't have any characters
  if (_rx_buffer->head == _rx_buffer->tail) {
    return -1;
     aca:	2f ef       	ldi	r18, 0xFF	; 255
     acc:	3f ef       	ldi	r19, 0xFF	; 255
  } else {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % SERIAL_BUFFER_SIZE;
    return c;
  }
}
     ace:	c9 01       	movw	r24, r18
     ad0:	08 95       	ret

00000ad2 <_ZN14HardwareSerial5flushEv>:

void HardwareSerial::flush()
{
  while (_tx_buffer->head != _tx_buffer->tail)
     ad2:	dc 01       	movw	r26, r24
     ad4:	1e 96       	adiw	r26, 0x0e	; 14
     ad6:	8d 91       	ld	r24, X+
     ad8:	9c 91       	ld	r25, X
     ada:	1f 97       	sbiw	r26, 0x0f	; 15
     adc:	fc 01       	movw	r30, r24
     ade:	e0 5c       	subi	r30, 0xC0	; 192
     ae0:	ff 4f       	sbci	r31, 0xFF	; 255
     ae2:	8e 5b       	subi	r24, 0xBE	; 190
     ae4:	9f 4f       	sbci	r25, 0xFF	; 255
     ae6:	40 81       	ld	r20, Z
     ae8:	51 81       	ldd	r21, Z+1	; 0x01
     aea:	dc 01       	movw	r26, r24
     aec:	2d 91       	ld	r18, X+
     aee:	3c 91       	ld	r19, X
     af0:	11 97       	sbiw	r26, 0x01	; 1
     af2:	42 17       	cp	r20, r18
     af4:	53 07       	cpc	r21, r19
     af6:	b9 f7       	brne	.-18     	; 0xae6 <_ZN14HardwareSerial5flushEv+0x14>
    ;
}
     af8:	08 95       	ret

00000afa <_ZN14HardwareSerial5writeEh>:

size_t HardwareSerial::write(uint8_t c)
{
     afa:	1f 93       	push	r17
     afc:	fc 01       	movw	r30, r24
     afe:	16 2f       	mov	r17, r22
  int i = (_tx_buffer->head + 1) % SERIAL_BUFFER_SIZE;
     b00:	26 85       	ldd	r18, Z+14	; 0x0e
     b02:	37 85       	ldd	r19, Z+15	; 0x0f
     b04:	d9 01       	movw	r26, r18
     b06:	a0 5c       	subi	r26, 0xC0	; 192
     b08:	bf 4f       	sbci	r27, 0xFF	; 255
     b0a:	8d 91       	ld	r24, X+
     b0c:	9c 91       	ld	r25, X
     b0e:	01 96       	adiw	r24, 0x01	; 1
     b10:	60 e4       	ldi	r22, 0x40	; 64
     b12:	70 e0       	ldi	r23, 0x00	; 0
     b14:	0e 94 ad 08 	call	0x115a	; 0x115a <__divmodhi4>
	
  // If the output buffer is full, there's nothing for it other than to 
  // wait for the interrupt handler to empty it a bit
  // ???: return 0 here instead?
  while (i == _tx_buffer->tail)
     b18:	d9 01       	movw	r26, r18
     b1a:	ae 5b       	subi	r26, 0xBE	; 190
     b1c:	bf 4f       	sbci	r27, 0xFF	; 255
     b1e:	4d 91       	ld	r20, X+
     b20:	5c 91       	ld	r21, X
     b22:	11 97       	sbiw	r26, 0x01	; 1
     b24:	84 17       	cp	r24, r20
     b26:	95 07       	cpc	r25, r21
     b28:	d1 f3       	breq	.-12     	; 0xb1e <_ZN14HardwareSerial5writeEh+0x24>
    ;
	
  _tx_buffer->buffer[_tx_buffer->head] = c;
     b2a:	d9 01       	movw	r26, r18
     b2c:	a0 5c       	subi	r26, 0xC0	; 192
     b2e:	bf 4f       	sbci	r27, 0xFF	; 255
     b30:	0d 90       	ld	r0, X+
     b32:	bc 91       	ld	r27, X
     b34:	a0 2d       	mov	r26, r0
     b36:	a2 0f       	add	r26, r18
     b38:	b3 1f       	adc	r27, r19
     b3a:	1c 93       	st	X, r17
  _tx_buffer->head = i;
     b3c:	a6 85       	ldd	r26, Z+14	; 0x0e
     b3e:	b7 85       	ldd	r27, Z+15	; 0x0f
     b40:	a0 5c       	subi	r26, 0xC0	; 192
     b42:	bf 4f       	sbci	r27, 0xFF	; 255
     b44:	11 96       	adiw	r26, 0x01	; 1
     b46:	9c 93       	st	X, r25
     b48:	8e 93       	st	-X, r24
	
  sbi(*_ucsrb, _udrie);
     b4a:	a6 89       	ldd	r26, Z+22	; 0x16
     b4c:	b7 89       	ldd	r27, Z+23	; 0x17
     b4e:	2c 91       	ld	r18, X
     b50:	81 e0       	ldi	r24, 0x01	; 1
     b52:	90 e0       	ldi	r25, 0x00	; 0
     b54:	05 8c       	ldd	r0, Z+29	; 0x1d
     b56:	02 c0       	rjmp	.+4      	; 0xb5c <_ZN14HardwareSerial5writeEh+0x62>
     b58:	88 0f       	add	r24, r24
     b5a:	99 1f       	adc	r25, r25
     b5c:	0a 94       	dec	r0
     b5e:	e2 f7       	brpl	.-8      	; 0xb58 <_ZN14HardwareSerial5writeEh+0x5e>
     b60:	28 2b       	or	r18, r24
     b62:	2c 93       	st	X, r18
  
  return 1;
}
     b64:	81 e0       	ldi	r24, 0x01	; 1
     b66:	90 e0       	ldi	r25, 0x00	; 0
     b68:	1f 91       	pop	r17
     b6a:	08 95       	ret

00000b6c <_Z10store_charhP11ring_buffer>:
  ring_buffer tx_buffer3  =  { { 0 }, 0, 0 };
#endif

inline void store_char(unsigned char c, ring_buffer *buffer)
{
  int i = (unsigned int)(buffer->head + 1) % SERIAL_BUFFER_SIZE;
     b6c:	fb 01       	movw	r30, r22
     b6e:	e0 5c       	subi	r30, 0xC0	; 192
     b70:	ff 4f       	sbci	r31, 0xFF	; 255
     b72:	20 81       	ld	r18, Z
     b74:	31 81       	ldd	r19, Z+1	; 0x01
     b76:	2f 5f       	subi	r18, 0xFF	; 255
     b78:	3f 4f       	sbci	r19, 0xFF	; 255
     b7a:	2f 73       	andi	r18, 0x3F	; 63
     b7c:	30 70       	andi	r19, 0x00	; 0

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if (i != buffer->tail) {
     b7e:	db 01       	movw	r26, r22
     b80:	ae 5b       	subi	r26, 0xBE	; 190
     b82:	bf 4f       	sbci	r27, 0xFF	; 255
     b84:	4d 91       	ld	r20, X+
     b86:	5c 91       	ld	r21, X
     b88:	11 97       	sbiw	r26, 0x01	; 1
     b8a:	24 17       	cp	r18, r20
     b8c:	35 07       	cpc	r19, r21
     b8e:	39 f0       	breq	.+14     	; 0xb9e <_Z10store_charhP11ring_buffer+0x32>
    buffer->buffer[buffer->head] = c;
     b90:	a0 81       	ld	r26, Z
     b92:	b1 81       	ldd	r27, Z+1	; 0x01
     b94:	a6 0f       	add	r26, r22
     b96:	b7 1f       	adc	r27, r23
     b98:	8c 93       	st	X, r24
    buffer->head = i;
     b9a:	31 83       	std	Z+1, r19	; 0x01
     b9c:	20 83       	st	Z, r18
     b9e:	08 95       	ret

00000ba0 <__vector_18>:
#elif defined(USART0_RX_vect)
  SIGNAL(USART0_RX_vect)
#elif defined(SIG_UART_RECV)
  SIGNAL(SIG_UART_RECV)
#endif
  {
     ba0:	1f 92       	push	r1
     ba2:	0f 92       	push	r0
     ba4:	0f b6       	in	r0, 0x3f	; 63
     ba6:	0f 92       	push	r0
     ba8:	11 24       	eor	r1, r1
     baa:	2f 93       	push	r18
     bac:	3f 93       	push	r19
     bae:	4f 93       	push	r20
     bb0:	5f 93       	push	r21
     bb2:	6f 93       	push	r22
     bb4:	7f 93       	push	r23
     bb6:	8f 93       	push	r24
     bb8:	9f 93       	push	r25
     bba:	af 93       	push	r26
     bbc:	bf 93       	push	r27
     bbe:	ef 93       	push	r30
     bc0:	ff 93       	push	r31
  #if defined(UDR0)
    unsigned char c  =  UDR0;
     bc2:	80 91 c6 00 	lds	r24, 0x00C6
  #elif defined(UDR)
    unsigned char c  =  UDR;
  #else
    #error UDR not defined
  #endif
    store_char(c, &rx_buffer);
     bc6:	6c e8       	ldi	r22, 0x8C	; 140
     bc8:	71 e0       	ldi	r23, 0x01	; 1
     bca:	0e 94 b6 05 	call	0xb6c	; 0xb6c <_Z10store_charhP11ring_buffer>
  }
     bce:	ff 91       	pop	r31
     bd0:	ef 91       	pop	r30
     bd2:	bf 91       	pop	r27
     bd4:	af 91       	pop	r26
     bd6:	9f 91       	pop	r25
     bd8:	8f 91       	pop	r24
     bda:	7f 91       	pop	r23
     bdc:	6f 91       	pop	r22
     bde:	5f 91       	pop	r21
     be0:	4f 91       	pop	r20
     be2:	3f 91       	pop	r19
     be4:	2f 91       	pop	r18
     be6:	0f 90       	pop	r0
     be8:	0f be       	out	0x3f, r0	; 63
     bea:	0f 90       	pop	r0
     bec:	1f 90       	pop	r1
     bee:	18 95       	reti

00000bf0 <__vector_19>:
#elif defined(USART0_UDRE_vect)
ISR(USART0_UDRE_vect)
#elif defined(USART_UDRE_vect)
ISR(USART_UDRE_vect)
#endif
{
     bf0:	1f 92       	push	r1
     bf2:	0f 92       	push	r0
     bf4:	0f b6       	in	r0, 0x3f	; 63
     bf6:	0f 92       	push	r0
     bf8:	11 24       	eor	r1, r1
     bfa:	2f 93       	push	r18
     bfc:	3f 93       	push	r19
     bfe:	5f 93       	push	r21
     c00:	6f 93       	push	r22
     c02:	7f 93       	push	r23
     c04:	8f 93       	push	r24
     c06:	9f 93       	push	r25
     c08:	af 93       	push	r26
     c0a:	bf 93       	push	r27
     c0c:	ef 93       	push	r30
     c0e:	ff 93       	push	r31
  if (tx_buffer.head == tx_buffer.tail) {
     c10:	20 91 10 02 	lds	r18, 0x0210
     c14:	30 91 11 02 	lds	r19, 0x0211
     c18:	80 91 12 02 	lds	r24, 0x0212
     c1c:	90 91 13 02 	lds	r25, 0x0213
     c20:	28 17       	cp	r18, r24
     c22:	39 07       	cpc	r19, r25
     c24:	31 f4       	brne	.+12     	; 0xc32 <__vector_19+0x42>
	// Buffer empty, so disable interrupts
#if defined(UCSR0B)
    cbi(UCSR0B, UDRIE0);
     c26:	80 91 c1 00 	lds	r24, 0x00C1
     c2a:	8f 7d       	andi	r24, 0xDF	; 223
     c2c:	80 93 c1 00 	sts	0x00C1, r24
     c30:	16 c0       	rjmp	.+44     	; 0xc5e <__vector_19+0x6e>
    cbi(UCSRB, UDRIE);
#endif
  }
  else {
    // There is more data in the output buffer. Send the next byte
    unsigned char c = tx_buffer.buffer[tx_buffer.tail];
     c32:	e0 91 12 02 	lds	r30, 0x0212
     c36:	f0 91 13 02 	lds	r31, 0x0213
     c3a:	e0 53       	subi	r30, 0x30	; 48
     c3c:	fe 4f       	sbci	r31, 0xFE	; 254
     c3e:	20 81       	ld	r18, Z
    tx_buffer.tail = (tx_buffer.tail + 1) % SERIAL_BUFFER_SIZE;
     c40:	80 91 12 02 	lds	r24, 0x0212
     c44:	90 91 13 02 	lds	r25, 0x0213
     c48:	01 96       	adiw	r24, 0x01	; 1
     c4a:	60 e4       	ldi	r22, 0x40	; 64
     c4c:	70 e0       	ldi	r23, 0x00	; 0
     c4e:	0e 94 ad 08 	call	0x115a	; 0x115a <__divmodhi4>
     c52:	90 93 13 02 	sts	0x0213, r25
     c56:	80 93 12 02 	sts	0x0212, r24
	
  #if defined(UDR0)
    UDR0 = c;
     c5a:	20 93 c6 00 	sts	0x00C6, r18
    UDR = c;
  #else
    #error UDR not defined
  #endif
  }
}
     c5e:	ff 91       	pop	r31
     c60:	ef 91       	pop	r30
     c62:	bf 91       	pop	r27
     c64:	af 91       	pop	r26
     c66:	9f 91       	pop	r25
     c68:	8f 91       	pop	r24
     c6a:	7f 91       	pop	r23
     c6c:	6f 91       	pop	r22
     c6e:	5f 91       	pop	r21
     c70:	3f 91       	pop	r19
     c72:	2f 91       	pop	r18
     c74:	0f 90       	pop	r0
     c76:	0f be       	out	0x3f, r0	; 63
     c78:	0f 90       	pop	r0
     c7a:	1f 90       	pop	r1
     c7c:	18 95       	reti

00000c7e <_ZN14HardwareSerial5beginEm>:
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
{
     c7e:	df 92       	push	r13
     c80:	ef 92       	push	r14
     c82:	ff 92       	push	r15
     c84:	0f 93       	push	r16
     c86:	1f 93       	push	r17
     c88:	cf 93       	push	r28
     c8a:	df 93       	push	r29
     c8c:	ec 01       	movw	r28, r24
     c8e:	7a 01       	movw	r14, r20
     c90:	8b 01       	movw	r16, r22
  _u2x = u2x;
}

// Public Methods //////////////////////////////////////////////////////////////

void HardwareSerial::begin(unsigned long baud)
     c92:	dd 24       	eor	r13, r13
     c94:	d3 94       	inc	r13
     c96:	40 30       	cpi	r20, 0x00	; 0
     c98:	81 ee       	ldi	r24, 0xE1	; 225
     c9a:	58 07       	cpc	r21, r24
     c9c:	80 e0       	ldi	r24, 0x00	; 0
     c9e:	68 07       	cpc	r22, r24
     ca0:	80 e0       	ldi	r24, 0x00	; 0
     ca2:	78 07       	cpc	r23, r24
     ca4:	49 f4       	brne	.+18     	; 0xcb8 <_ZN14HardwareSerial5beginEm+0x3a>
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
  }
  
  if ((baud_setting > 4095) && use_u2x)
  {
    use_u2x = false;
     ca6:	dd 24       	eor	r13, r13
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
  } else {
    *_ucsra = 0;
     ca8:	ec 89       	ldd	r30, Y+20	; 0x14
     caa:	fd 89       	ldd	r31, Y+21	; 0x15
     cac:	10 82       	st	Z, r1
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     cae:	60 e8       	ldi	r22, 0x80	; 128
     cb0:	74 e8       	ldi	r23, 0x84	; 132
     cb2:	8e e1       	ldi	r24, 0x1E	; 30
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0f c0       	rjmp	.+30     	; 0xcd6 <_ZN14HardwareSerial5beginEm+0x58>
#endif

try_again:
  
  if (use_u2x) {
    *_ucsra = 1 << _u2x;
     cb8:	ec 89       	ldd	r30, Y+20	; 0x14
     cba:	fd 89       	ldd	r31, Y+21	; 0x15
     cbc:	81 e0       	ldi	r24, 0x01	; 1
     cbe:	90 e0       	ldi	r25, 0x00	; 0
     cc0:	0e 8c       	ldd	r0, Y+30	; 0x1e
     cc2:	02 c0       	rjmp	.+4      	; 0xcc8 <_ZN14HardwareSerial5beginEm+0x4a>
     cc4:	88 0f       	add	r24, r24
     cc6:	99 1f       	adc	r25, r25
     cc8:	0a 94       	dec	r0
     cca:	e2 f7       	brpl	.-8      	; 0xcc4 <_ZN14HardwareSerial5beginEm+0x46>
     ccc:	80 83       	st	Z, r24
    baud_setting = (F_CPU / 4 / baud - 1) / 2;
     cce:	60 e0       	ldi	r22, 0x00	; 0
     cd0:	79 e0       	ldi	r23, 0x09	; 9
     cd2:	8d e3       	ldi	r24, 0x3D	; 61
     cd4:	90 e0       	ldi	r25, 0x00	; 0
  } else {
    *_ucsra = 0;
    baud_setting = (F_CPU / 8 / baud - 1) / 2;
     cd6:	a8 01       	movw	r20, r16
     cd8:	97 01       	movw	r18, r14
     cda:	0e 94 c0 08 	call	0x1180	; 0x1180 <__udivmodsi4>
     cde:	21 50       	subi	r18, 0x01	; 1
     ce0:	30 40       	sbci	r19, 0x00	; 0
     ce2:	40 40       	sbci	r20, 0x00	; 0
     ce4:	50 40       	sbci	r21, 0x00	; 0
     ce6:	56 95       	lsr	r21
     ce8:	47 95       	ror	r20
     cea:	37 95       	ror	r19
     cec:	27 95       	ror	r18
  }
  
  if ((baud_setting > 4095) && use_u2x)
     cee:	80 e1       	ldi	r24, 0x10	; 16
     cf0:	20 30       	cpi	r18, 0x00	; 0
     cf2:	38 07       	cpc	r19, r24
     cf4:	10 f0       	brcs	.+4      	; 0xcfa <_ZN14HardwareSerial5beginEm+0x7c>
     cf6:	dd 20       	and	r13, r13
     cf8:	b1 f6       	brne	.-84     	; 0xca6 <_ZN14HardwareSerial5beginEm+0x28>
    use_u2x = false;
    goto try_again;
  }

  // assign the baud_setting, a.k.a. ubbr (USART Baud Rate Register)
  *_ubrrh = baud_setting >> 8;
     cfa:	e8 89       	ldd	r30, Y+16	; 0x10
     cfc:	f9 89       	ldd	r31, Y+17	; 0x11
     cfe:	30 83       	st	Z, r19
  *_ubrrl = baud_setting;
     d00:	ea 89       	ldd	r30, Y+18	; 0x12
     d02:	fb 89       	ldd	r31, Y+19	; 0x13
     d04:	20 83       	st	Z, r18

  sbi(*_ucsrb, _rxen);
     d06:	ee 89       	ldd	r30, Y+22	; 0x16
     d08:	ff 89       	ldd	r31, Y+23	; 0x17
     d0a:	40 81       	ld	r20, Z
     d0c:	81 e0       	ldi	r24, 0x01	; 1
     d0e:	90 e0       	ldi	r25, 0x00	; 0
     d10:	9c 01       	movw	r18, r24
     d12:	0a 8c       	ldd	r0, Y+26	; 0x1a
     d14:	02 c0       	rjmp	.+4      	; 0xd1a <_ZN14HardwareSerial5beginEm+0x9c>
     d16:	22 0f       	add	r18, r18
     d18:	33 1f       	adc	r19, r19
     d1a:	0a 94       	dec	r0
     d1c:	e2 f7       	brpl	.-8      	; 0xd16 <_ZN14HardwareSerial5beginEm+0x98>
     d1e:	42 2b       	or	r20, r18
     d20:	40 83       	st	Z, r20
  sbi(*_ucsrb, _txen);
     d22:	ee 89       	ldd	r30, Y+22	; 0x16
     d24:	ff 89       	ldd	r31, Y+23	; 0x17
     d26:	40 81       	ld	r20, Z
     d28:	9c 01       	movw	r18, r24
     d2a:	0b 8c       	ldd	r0, Y+27	; 0x1b
     d2c:	02 c0       	rjmp	.+4      	; 0xd32 <_ZN14HardwareSerial5beginEm+0xb4>
     d2e:	22 0f       	add	r18, r18
     d30:	33 1f       	adc	r19, r19
     d32:	0a 94       	dec	r0
     d34:	e2 f7       	brpl	.-8      	; 0xd2e <_ZN14HardwareSerial5beginEm+0xb0>
     d36:	42 2b       	or	r20, r18
     d38:	40 83       	st	Z, r20
  sbi(*_ucsrb, _rxcie);
     d3a:	ee 89       	ldd	r30, Y+22	; 0x16
     d3c:	ff 89       	ldd	r31, Y+23	; 0x17
     d3e:	40 81       	ld	r20, Z
     d40:	9c 01       	movw	r18, r24
     d42:	0c 8c       	ldd	r0, Y+28	; 0x1c
     d44:	02 c0       	rjmp	.+4      	; 0xd4a <_ZN14HardwareSerial5beginEm+0xcc>
     d46:	22 0f       	add	r18, r18
     d48:	33 1f       	adc	r19, r19
     d4a:	0a 94       	dec	r0
     d4c:	e2 f7       	brpl	.-8      	; 0xd46 <_ZN14HardwareSerial5beginEm+0xc8>
     d4e:	42 2b       	or	r20, r18
     d50:	40 83       	st	Z, r20
  cbi(*_ucsrb, _udrie);
     d52:	ee 89       	ldd	r30, Y+22	; 0x16
     d54:	ff 89       	ldd	r31, Y+23	; 0x17
     d56:	20 81       	ld	r18, Z
     d58:	0d 8c       	ldd	r0, Y+29	; 0x1d
     d5a:	02 c0       	rjmp	.+4      	; 0xd60 <_ZN14HardwareSerial5beginEm+0xe2>
     d5c:	88 0f       	add	r24, r24
     d5e:	99 1f       	adc	r25, r25
     d60:	0a 94       	dec	r0
     d62:	e2 f7       	brpl	.-8      	; 0xd5c <_ZN14HardwareSerial5beginEm+0xde>
     d64:	80 95       	com	r24
     d66:	82 23       	and	r24, r18
     d68:	80 83       	st	Z, r24
}
     d6a:	df 91       	pop	r29
     d6c:	cf 91       	pop	r28
     d6e:	1f 91       	pop	r17
     d70:	0f 91       	pop	r16
     d72:	ff 90       	pop	r15
     d74:	ef 90       	pop	r14
     d76:	df 90       	pop	r13
     d78:	08 95       	ret

00000d7a <_GLOBAL__I_rx_buffer>:
    size_t printNumber(unsigned long, uint8_t);
    size_t printFloat(double, uint8_t);
  protected:
    void setWriteError(int err = 1) { write_error = err; }
  public:
    Print() : write_error(0) {}
     d7a:	10 92 17 02 	sts	0x0217, r1
     d7e:	10 92 16 02 	sts	0x0216, r1
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
     d82:	88 ee       	ldi	r24, 0xE8	; 232
     d84:	93 e0       	ldi	r25, 0x03	; 3
     d86:	a0 e0       	ldi	r26, 0x00	; 0
     d88:	b0 e0       	ldi	r27, 0x00	; 0
     d8a:	80 93 18 02 	sts	0x0218, r24
     d8e:	90 93 19 02 	sts	0x0219, r25
     d92:	a0 93 1a 02 	sts	0x021A, r26
     d96:	b0 93 1b 02 	sts	0x021B, r27

HardwareSerial::HardwareSerial(ring_buffer *rx_buffer, ring_buffer *tx_buffer,
  volatile uint8_t *ubrrh, volatile uint8_t *ubrrl,
  volatile uint8_t *ucsra, volatile uint8_t *ucsrb,
  volatile uint8_t *udr,
  uint8_t rxen, uint8_t txen, uint8_t rxcie, uint8_t udrie, uint8_t u2x)
     d9a:	e6 e1       	ldi	r30, 0x16	; 22
     d9c:	f2 e0       	ldi	r31, 0x02	; 2
     d9e:	80 e6       	ldi	r24, 0x60	; 96
     da0:	91 e0       	ldi	r25, 0x01	; 1
     da2:	92 93       	st	-Z, r25
     da4:	82 93       	st	-Z, r24
{
  _rx_buffer = rx_buffer;
     da6:	8c e8       	ldi	r24, 0x8C	; 140
     da8:	91 e0       	ldi	r25, 0x01	; 1
     daa:	95 87       	std	Z+13, r25	; 0x0d
     dac:	84 87       	std	Z+12, r24	; 0x0c
  _tx_buffer = tx_buffer;
     dae:	80 ed       	ldi	r24, 0xD0	; 208
     db0:	91 e0       	ldi	r25, 0x01	; 1
     db2:	97 87       	std	Z+15, r25	; 0x0f
     db4:	86 87       	std	Z+14, r24	; 0x0e
  _ubrrh = ubrrh;
     db6:	85 ec       	ldi	r24, 0xC5	; 197
     db8:	90 e0       	ldi	r25, 0x00	; 0
     dba:	91 8b       	std	Z+17, r25	; 0x11
     dbc:	80 8b       	std	Z+16, r24	; 0x10
  _ubrrl = ubrrl;
     dbe:	84 ec       	ldi	r24, 0xC4	; 196
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	93 8b       	std	Z+19, r25	; 0x13
     dc4:	82 8b       	std	Z+18, r24	; 0x12
  _ucsra = ucsra;
     dc6:	80 ec       	ldi	r24, 0xC0	; 192
     dc8:	90 e0       	ldi	r25, 0x00	; 0
     dca:	95 8b       	std	Z+21, r25	; 0x15
     dcc:	84 8b       	std	Z+20, r24	; 0x14
  _ucsrb = ucsrb;
     dce:	81 ec       	ldi	r24, 0xC1	; 193
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	97 8b       	std	Z+23, r25	; 0x17
     dd4:	86 8b       	std	Z+22, r24	; 0x16
  _udr = udr;
     dd6:	86 ec       	ldi	r24, 0xC6	; 198
     dd8:	90 e0       	ldi	r25, 0x00	; 0
     dda:	91 8f       	std	Z+25, r25	; 0x19
     ddc:	80 8f       	std	Z+24, r24	; 0x18
  _rxen = rxen;
     dde:	84 e0       	ldi	r24, 0x04	; 4
     de0:	82 8f       	std	Z+26, r24	; 0x1a
  _txen = txen;
     de2:	83 e0       	ldi	r24, 0x03	; 3
     de4:	83 8f       	std	Z+27, r24	; 0x1b
  _rxcie = rxcie;
     de6:	87 e0       	ldi	r24, 0x07	; 7
     de8:	84 8f       	std	Z+28, r24	; 0x1c
  _udrie = udrie;
     dea:	85 e0       	ldi	r24, 0x05	; 5
     dec:	85 8f       	std	Z+29, r24	; 0x1d
  _u2x = u2x;
     dee:	81 e0       	ldi	r24, 0x01	; 1
     df0:	86 8f       	std	Z+30, r24	; 0x1e
// Preinstantiate Objects //////////////////////////////////////////////////////

#if defined(UBRRH) && defined(UBRRL)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRRH, &UBRRL, &UCSRA, &UCSRB, &UDR, RXEN, TXEN, RXCIE, UDRIE, U2X);
#elif defined(UBRR0H) && defined(UBRR0L)
  HardwareSerial Serial(&rx_buffer, &tx_buffer, &UBRR0H, &UBRR0L, &UCSR0A, &UCSR0B, &UDR0, RXEN0, TXEN0, RXCIE0, UDRIE0, U2X0);
     df2:	08 95       	ret

00000df4 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
     df4:	cf 92       	push	r12
     df6:	df 92       	push	r13
     df8:	ef 92       	push	r14
     dfa:	ff 92       	push	r15
     dfc:	0f 93       	push	r16
     dfe:	1f 93       	push	r17
     e00:	cf 93       	push	r28
     e02:	df 93       	push	r29
     e04:	6c 01       	movw	r12, r24
     e06:	7b 01       	movw	r14, r22
     e08:	8a 01       	movw	r16, r20
  size_t n = 0;
     e0a:	c0 e0       	ldi	r28, 0x00	; 0
     e0c:	d0 e0       	ldi	r29, 0x00	; 0
  while (size--) {
     e0e:	0f c0       	rjmp	.+30     	; 0xe2e <_ZN5Print5writeEPKhj+0x3a>
    n += write(*buffer++);
     e10:	d7 01       	movw	r26, r14
     e12:	6d 91       	ld	r22, X+
     e14:	7d 01       	movw	r14, r26
     e16:	d6 01       	movw	r26, r12
     e18:	ed 91       	ld	r30, X+
     e1a:	fc 91       	ld	r31, X
     e1c:	01 90       	ld	r0, Z+
     e1e:	f0 81       	ld	r31, Z
     e20:	e0 2d       	mov	r30, r0
     e22:	c6 01       	movw	r24, r12
     e24:	09 95       	icall
     e26:	c8 0f       	add	r28, r24
     e28:	d9 1f       	adc	r29, r25
     e2a:	01 50       	subi	r16, 0x01	; 1
     e2c:	10 40       	sbci	r17, 0x00	; 0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
     e2e:	01 15       	cp	r16, r1
     e30:	11 05       	cpc	r17, r1
     e32:	71 f7       	brne	.-36     	; 0xe10 <_ZN5Print5writeEPKhj+0x1c>
    n += write(*buffer++);
  }
  return n;
}
     e34:	ce 01       	movw	r24, r28
     e36:	df 91       	pop	r29
     e38:	cf 91       	pop	r28
     e3a:	1f 91       	pop	r17
     e3c:	0f 91       	pop	r16
     e3e:	ff 90       	pop	r15
     e40:	ef 90       	pop	r14
     e42:	df 90       	pop	r13
     e44:	cf 90       	pop	r12
     e46:	08 95       	ret

00000e48 <_ZdlPv>:
  return malloc(size);
}

void operator delete(void * ptr)
{
  free(ptr);
     e48:	0e 94 96 09 	call	0x132c	; 0x132c <free>
} 
     e4c:	08 95       	ret

00000e4e <__vector_16>:
#if defined(__AVR_ATtiny24__) || defined(__AVR_ATtiny44__) || defined(__AVR_ATtiny84__)
SIGNAL(TIM0_OVF_vect)
#else
SIGNAL(TIMER0_OVF_vect)
#endif
{
     e4e:	1f 92       	push	r1
     e50:	0f 92       	push	r0
     e52:	0f b6       	in	r0, 0x3f	; 63
     e54:	0f 92       	push	r0
     e56:	11 24       	eor	r1, r1
     e58:	2f 93       	push	r18
     e5a:	3f 93       	push	r19
     e5c:	8f 93       	push	r24
     e5e:	9f 93       	push	r25
     e60:	af 93       	push	r26
     e62:	bf 93       	push	r27
	// copy these to local variables so they can be stored in registers
	// (volatile variables must be read from memory on every access)
	unsigned long m = timer0_millis;
     e64:	80 91 37 02 	lds	r24, 0x0237
     e68:	90 91 38 02 	lds	r25, 0x0238
     e6c:	a0 91 39 02 	lds	r26, 0x0239
     e70:	b0 91 3a 02 	lds	r27, 0x023A
	unsigned char f = timer0_fract;
     e74:	30 91 3b 02 	lds	r19, 0x023B

	m += MILLIS_INC;
     e78:	01 96       	adiw	r24, 0x01	; 1
     e7a:	a1 1d       	adc	r26, r1
     e7c:	b1 1d       	adc	r27, r1
	f += FRACT_INC;
     e7e:	23 2f       	mov	r18, r19
     e80:	2d 5f       	subi	r18, 0xFD	; 253
	if (f >= FRACT_MAX) {
     e82:	2d 37       	cpi	r18, 0x7D	; 125
     e84:	20 f0       	brcs	.+8      	; 0xe8e <__vector_16+0x40>
		f -= FRACT_MAX;
     e86:	2d 57       	subi	r18, 0x7D	; 125
		m += 1;
     e88:	01 96       	adiw	r24, 0x01	; 1
     e8a:	a1 1d       	adc	r26, r1
     e8c:	b1 1d       	adc	r27, r1
	}

	timer0_fract = f;
     e8e:	20 93 3b 02 	sts	0x023B, r18
	timer0_millis = m;
     e92:	80 93 37 02 	sts	0x0237, r24
     e96:	90 93 38 02 	sts	0x0238, r25
     e9a:	a0 93 39 02 	sts	0x0239, r26
     e9e:	b0 93 3a 02 	sts	0x023A, r27
	timer0_overflow_count++;
     ea2:	80 91 33 02 	lds	r24, 0x0233
     ea6:	90 91 34 02 	lds	r25, 0x0234
     eaa:	a0 91 35 02 	lds	r26, 0x0235
     eae:	b0 91 36 02 	lds	r27, 0x0236
     eb2:	01 96       	adiw	r24, 0x01	; 1
     eb4:	a1 1d       	adc	r26, r1
     eb6:	b1 1d       	adc	r27, r1
     eb8:	80 93 33 02 	sts	0x0233, r24
     ebc:	90 93 34 02 	sts	0x0234, r25
     ec0:	a0 93 35 02 	sts	0x0235, r26
     ec4:	b0 93 36 02 	sts	0x0236, r27
}
     ec8:	bf 91       	pop	r27
     eca:	af 91       	pop	r26
     ecc:	9f 91       	pop	r25
     ece:	8f 91       	pop	r24
     ed0:	3f 91       	pop	r19
     ed2:	2f 91       	pop	r18
     ed4:	0f 90       	pop	r0
     ed6:	0f be       	out	0x3f, r0	; 63
     ed8:	0f 90       	pop	r0
     eda:	1f 90       	pop	r1
     edc:	18 95       	reti

00000ede <millis>:

unsigned long millis()
{
	unsigned long m;
	uint8_t oldSREG = SREG;
     ede:	8f b7       	in	r24, 0x3f	; 63

	// disable interrupts while we read timer0_millis or we might get an
	// inconsistent value (e.g. in the middle of a write to timer0_millis)
	cli();
     ee0:	f8 94       	cli
	m = timer0_millis;
     ee2:	20 91 37 02 	lds	r18, 0x0237
     ee6:	30 91 38 02 	lds	r19, 0x0238
     eea:	40 91 39 02 	lds	r20, 0x0239
     eee:	50 91 3a 02 	lds	r21, 0x023A
	SREG = oldSREG;
     ef2:	8f bf       	out	0x3f, r24	; 63

	return m;
}
     ef4:	b9 01       	movw	r22, r18
     ef6:	ca 01       	movw	r24, r20
     ef8:	08 95       	ret

00000efa <micros>:

unsigned long micros() {
	unsigned long m;
	uint8_t oldSREG = SREG, t;
     efa:	9f b7       	in	r25, 0x3f	; 63
	
	cli();
     efc:	f8 94       	cli
	m = timer0_overflow_count;
     efe:	20 91 33 02 	lds	r18, 0x0233
     f02:	30 91 34 02 	lds	r19, 0x0234
     f06:	40 91 35 02 	lds	r20, 0x0235
     f0a:	50 91 36 02 	lds	r21, 0x0236
#if defined(TCNT0)
	t = TCNT0;
     f0e:	86 b5       	in	r24, 0x26	; 38
	#error TIMER 0 not defined
#endif

  
#ifdef TIFR0
	if ((TIFR0 & _BV(TOV0)) && (t < 255))
     f10:	a8 9b       	sbis	0x15, 0	; 21
     f12:	06 c0       	rjmp	.+12     	; 0xf20 <micros+0x26>
     f14:	8f 3f       	cpi	r24, 0xFF	; 255
     f16:	21 f0       	breq	.+8      	; 0xf20 <micros+0x26>
		m++;
     f18:	2f 5f       	subi	r18, 0xFF	; 255
     f1a:	3f 4f       	sbci	r19, 0xFF	; 255
     f1c:	4f 4f       	sbci	r20, 0xFF	; 255
     f1e:	5f 4f       	sbci	r21, 0xFF	; 255
#else
	if ((TIFR & _BV(TOV0)) && (t < 255))
		m++;
#endif

	SREG = oldSREG;
     f20:	9f bf       	out	0x3f, r25	; 63
	
	return ((m << 8) + t) * (64 / clockCyclesPerMicrosecond());
     f22:	54 2f       	mov	r21, r20
     f24:	43 2f       	mov	r20, r19
     f26:	32 2f       	mov	r19, r18
     f28:	22 27       	eor	r18, r18
     f2a:	28 0f       	add	r18, r24
     f2c:	31 1d       	adc	r19, r1
     f2e:	41 1d       	adc	r20, r1
     f30:	51 1d       	adc	r21, r1
     f32:	82 e0       	ldi	r24, 0x02	; 2
     f34:	22 0f       	add	r18, r18
     f36:	33 1f       	adc	r19, r19
     f38:	44 1f       	adc	r20, r20
     f3a:	55 1f       	adc	r21, r21
     f3c:	8a 95       	dec	r24
     f3e:	d1 f7       	brne	.-12     	; 0xf34 <micros+0x3a>
}
     f40:	b9 01       	movw	r22, r18
     f42:	ca 01       	movw	r24, r20
     f44:	08 95       	ret

00000f46 <delay>:

void delay(unsigned long ms)
{
     f46:	ef 92       	push	r14
     f48:	ff 92       	push	r15
     f4a:	0f 93       	push	r16
     f4c:	1f 93       	push	r17
     f4e:	cf 93       	push	r28
     f50:	df 93       	push	r29
     f52:	7b 01       	movw	r14, r22
     f54:	8c 01       	movw	r16, r24
	uint16_t start = (uint16_t)micros();
     f56:	0e 94 7d 07 	call	0xefa	; 0xefa <micros>
     f5a:	eb 01       	movw	r28, r22

	while (ms > 0) {
     f5c:	0f c0       	rjmp	.+30     	; 0xf7c <delay+0x36>
		if (((uint16_t)micros() - start) >= 1000) {
     f5e:	0e 94 7d 07 	call	0xefa	; 0xefa <micros>
     f62:	6c 1b       	sub	r22, r28
     f64:	7d 0b       	sbc	r23, r29
     f66:	83 e0       	ldi	r24, 0x03	; 3
     f68:	68 3e       	cpi	r22, 0xE8	; 232
     f6a:	78 07       	cpc	r23, r24
     f6c:	38 f0       	brcs	.+14     	; 0xf7c <delay+0x36>
			ms--;
     f6e:	08 94       	sec
     f70:	e1 08       	sbc	r14, r1
     f72:	f1 08       	sbc	r15, r1
     f74:	01 09       	sbc	r16, r1
     f76:	11 09       	sbc	r17, r1
			start += 1000;
     f78:	c8 51       	subi	r28, 0x18	; 24
     f7a:	dc 4f       	sbci	r29, 0xFC	; 252

void delay(unsigned long ms)
{
	uint16_t start = (uint16_t)micros();

	while (ms > 0) {
     f7c:	e1 14       	cp	r14, r1
     f7e:	f1 04       	cpc	r15, r1
     f80:	01 05       	cpc	r16, r1
     f82:	11 05       	cpc	r17, r1
     f84:	61 f7       	brne	.-40     	; 0xf5e <delay+0x18>
		if (((uint16_t)micros() - start) >= 1000) {
			ms--;
			start += 1000;
		}
	}
}
     f86:	df 91       	pop	r29
     f88:	cf 91       	pop	r28
     f8a:	1f 91       	pop	r17
     f8c:	0f 91       	pop	r16
     f8e:	ff 90       	pop	r15
     f90:	ef 90       	pop	r14
     f92:	08 95       	ret

00000f94 <init>:

void init()
{
	// this needs to be called before setup() or some functions won't
	// work there
	sei();
     f94:	78 94       	sei
	
	// on the ATmega168, timer 0 is also used for fast hardware pwm
	// (using phase-correct PWM would mean that timer 0 overflowed half as often
	// resulting in different millis() behavior on the ATmega8 and ATmega168)
#if defined(TCCR0A) && defined(WGM01)
	sbi(TCCR0A, WGM01);
     f96:	84 b5       	in	r24, 0x24	; 36
     f98:	82 60       	ori	r24, 0x02	; 2
     f9a:	84 bd       	out	0x24, r24	; 36
	sbi(TCCR0A, WGM00);
     f9c:	84 b5       	in	r24, 0x24	; 36
     f9e:	81 60       	ori	r24, 0x01	; 1
     fa0:	84 bd       	out	0x24, r24	; 36
	// this combination is for the standard atmega8
	sbi(TCCR0, CS01);
	sbi(TCCR0, CS00);
#elif defined(TCCR0B) && defined(CS01) && defined(CS00)
	// this combination is for the standard 168/328/1280/2560
	sbi(TCCR0B, CS01);
     fa2:	85 b5       	in	r24, 0x25	; 37
     fa4:	82 60       	ori	r24, 0x02	; 2
     fa6:	85 bd       	out	0x25, r24	; 37
	sbi(TCCR0B, CS00);
     fa8:	85 b5       	in	r24, 0x25	; 37
     faa:	81 60       	ori	r24, 0x01	; 1
     fac:	85 bd       	out	0x25, r24	; 37

	// enable timer 0 overflow interrupt
#if defined(TIMSK) && defined(TOIE0)
	sbi(TIMSK, TOIE0);
#elif defined(TIMSK0) && defined(TOIE0)
	sbi(TIMSK0, TOIE0);
     fae:	ee e6       	ldi	r30, 0x6E	; 110
     fb0:	f0 e0       	ldi	r31, 0x00	; 0
     fb2:	80 81       	ld	r24, Z
     fb4:	81 60       	ori	r24, 0x01	; 1
     fb6:	80 83       	st	Z, r24
	// this is better for motors as it ensures an even waveform
	// note, however, that fast pwm mode can achieve a frequency of up
	// 8 MHz (with a 16 MHz clock) at 50% duty cycle

#if defined(TCCR1B) && defined(CS11) && defined(CS10)
	TCCR1B = 0;
     fb8:	e1 e8       	ldi	r30, 0x81	; 129
     fba:	f0 e0       	ldi	r31, 0x00	; 0
     fbc:	10 82       	st	Z, r1

	// set timer 1 prescale factor to 64
	sbi(TCCR1B, CS11);
     fbe:	80 81       	ld	r24, Z
     fc0:	82 60       	ori	r24, 0x02	; 2
     fc2:	80 83       	st	Z, r24
#if F_CPU >= 8000000L
	sbi(TCCR1B, CS10);
     fc4:	80 81       	ld	r24, Z
     fc6:	81 60       	ori	r24, 0x01	; 1
     fc8:	80 83       	st	Z, r24
	sbi(TCCR1, CS10);
#endif
#endif
	// put timer 1 in 8-bit phase correct pwm mode
#if defined(TCCR1A) && defined(WGM10)
	sbi(TCCR1A, WGM10);
     fca:	e0 e8       	ldi	r30, 0x80	; 128
     fcc:	f0 e0       	ldi	r31, 0x00	; 0
     fce:	80 81       	ld	r24, Z
     fd0:	81 60       	ori	r24, 0x01	; 1
     fd2:	80 83       	st	Z, r24

	// set timer 2 prescale factor to 64
#if defined(TCCR2) && defined(CS22)
	sbi(TCCR2, CS22);
#elif defined(TCCR2B) && defined(CS22)
	sbi(TCCR2B, CS22);
     fd4:	e1 eb       	ldi	r30, 0xB1	; 177
     fd6:	f0 e0       	ldi	r31, 0x00	; 0
     fd8:	80 81       	ld	r24, Z
     fda:	84 60       	ori	r24, 0x04	; 4
     fdc:	80 83       	st	Z, r24

	// configure timer 2 for phase correct pwm (8-bit)
#if defined(TCCR2) && defined(WGM20)
	sbi(TCCR2, WGM20);
#elif defined(TCCR2A) && defined(WGM20)
	sbi(TCCR2A, WGM20);
     fde:	e0 eb       	ldi	r30, 0xB0	; 176
     fe0:	f0 e0       	ldi	r31, 0x00	; 0
     fe2:	80 81       	ld	r24, Z
     fe4:	81 60       	ori	r24, 0x01	; 1
     fe6:	80 83       	st	Z, r24
#if defined(ADCSRA)
	// set a2d prescale factor to 128
	// 16 MHz / 128 = 125 KHz, inside the desired 50-200 KHz range.
	// XXX: this will not work properly for other clock speeds, and
	// this code should use F_CPU to determine the prescale factor.
	sbi(ADCSRA, ADPS2);
     fe8:	ea e7       	ldi	r30, 0x7A	; 122
     fea:	f0 e0       	ldi	r31, 0x00	; 0
     fec:	80 81       	ld	r24, Z
     fee:	84 60       	ori	r24, 0x04	; 4
     ff0:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS1);
     ff2:	80 81       	ld	r24, Z
     ff4:	82 60       	ori	r24, 0x02	; 2
     ff6:	80 83       	st	Z, r24
	sbi(ADCSRA, ADPS0);
     ff8:	80 81       	ld	r24, Z
     ffa:	81 60       	ori	r24, 0x01	; 1
     ffc:	80 83       	st	Z, r24

	// enable a2d conversions
	sbi(ADCSRA, ADEN);
     ffe:	80 81       	ld	r24, Z
    1000:	80 68       	ori	r24, 0x80	; 128
    1002:	80 83       	st	Z, r24
	// here so they can be used as normal digital i/o; they will be
	// reconnected in Serial.begin()
#if defined(UCSRB)
	UCSRB = 0;
#elif defined(UCSR0B)
	UCSR0B = 0;
    1004:	10 92 c1 00 	sts	0x00C1, r1
#endif
}
    1008:	08 95       	ret

0000100a <turnOffPWM>:
//
//static inline void turnOffPWM(uint8_t timer) __attribute__ ((always_inline));
//static inline void turnOffPWM(uint8_t timer)
static void turnOffPWM(uint8_t timer)
{
	switch (timer)
    100a:	83 30       	cpi	r24, 0x03	; 3
    100c:	71 f0       	breq	.+28     	; 0x102a <turnOffPWM+0x20>
    100e:	84 30       	cpi	r24, 0x04	; 4
    1010:	28 f4       	brcc	.+10     	; 0x101c <turnOffPWM+0x12>
    1012:	81 30       	cpi	r24, 0x01	; 1
    1014:	a1 f0       	breq	.+40     	; 0x103e <turnOffPWM+0x34>
    1016:	82 30       	cpi	r24, 0x02	; 2
    1018:	21 f5       	brne	.+72     	; 0x1062 <turnOffPWM+0x58>
    101a:	14 c0       	rjmp	.+40     	; 0x1044 <turnOffPWM+0x3a>
    101c:	86 30       	cpi	r24, 0x06	; 6
    101e:	b1 f0       	breq	.+44     	; 0x104c <turnOffPWM+0x42>
    1020:	87 30       	cpi	r24, 0x07	; 7
    1022:	d1 f0       	breq	.+52     	; 0x1058 <turnOffPWM+0x4e>
    1024:	84 30       	cpi	r24, 0x04	; 4
    1026:	e9 f4       	brne	.+58     	; 0x1062 <turnOffPWM+0x58>
    1028:	04 c0       	rjmp	.+8      	; 0x1032 <turnOffPWM+0x28>
	{
		#if defined(TCCR1A) && defined(COM1A1)
		case TIMER1A:   cbi(TCCR1A, COM1A1);    break;
    102a:	80 91 80 00 	lds	r24, 0x0080
    102e:	8f 77       	andi	r24, 0x7F	; 127
    1030:	03 c0       	rjmp	.+6      	; 0x1038 <turnOffPWM+0x2e>
		#endif
		#if defined(TCCR1A) && defined(COM1B1)
		case TIMER1B:   cbi(TCCR1A, COM1B1);    break;
    1032:	80 91 80 00 	lds	r24, 0x0080
    1036:	8f 7d       	andi	r24, 0xDF	; 223
    1038:	80 93 80 00 	sts	0x0080, r24
    103c:	08 95       	ret
		#if defined(TCCR2) && defined(COM21)
		case  TIMER2:   cbi(TCCR2, COM21);      break;
		#endif
		
		#if defined(TCCR0A) && defined(COM0A1)
		case  TIMER0A:  cbi(TCCR0A, COM0A1);    break;
    103e:	84 b5       	in	r24, 0x24	; 36
    1040:	8f 77       	andi	r24, 0x7F	; 127
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <turnOffPWM+0x3e>
		#endif
		
		#if defined(TIMER0B) && defined(COM0B1)
		case  TIMER0B:  cbi(TCCR0A, COM0B1);    break;
    1044:	84 b5       	in	r24, 0x24	; 36
    1046:	8f 7d       	andi	r24, 0xDF	; 223
    1048:	84 bd       	out	0x24, r24	; 36
    104a:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2A1)
		case  TIMER2A:  cbi(TCCR2A, COM2A1);    break;
    104c:	80 91 b0 00 	lds	r24, 0x00B0
    1050:	8f 77       	andi	r24, 0x7F	; 127
    1052:	80 93 b0 00 	sts	0x00B0, r24
    1056:	08 95       	ret
		#endif
		#if defined(TCCR2A) && defined(COM2B1)
		case  TIMER2B:  cbi(TCCR2A, COM2B1);    break;
    1058:	80 91 b0 00 	lds	r24, 0x00B0
    105c:	8f 7d       	andi	r24, 0xDF	; 223
    105e:	80 93 b0 00 	sts	0x00B0, r24
    1062:	08 95       	ret

00001064 <pinMode>:
#include "wiring_private.h"
#include "pins_arduino.h"

void pinMode(uint8_t pin, uint8_t mode)
{
	uint8_t bit = digitalPinToBitMask(pin);
    1064:	90 e0       	ldi	r25, 0x00	; 0
    1066:	fc 01       	movw	r30, r24
    1068:	e6 56       	subi	r30, 0x66	; 102
    106a:	ff 4f       	sbci	r31, 0xFF	; 255
    106c:	24 91       	lpm	r18, Z+
	uint8_t port = digitalPinToPort(pin);
    106e:	fc 01       	movw	r30, r24
    1070:	ea 57       	subi	r30, 0x7A	; 122
    1072:	ff 4f       	sbci	r31, 0xFF	; 255
    1074:	e4 91       	lpm	r30, Z+
	volatile uint8_t *reg;

	if (port == NOT_A_PIN) return;
    1076:	ee 23       	and	r30, r30
    1078:	c1 f0       	breq	.+48     	; 0x10aa <pinMode+0x46>

	// JWS: can I let the optimizer do this?
	reg = portModeRegister(port);
    107a:	f0 e0       	ldi	r31, 0x00	; 0
    107c:	ee 0f       	add	r30, r30
    107e:	ff 1f       	adc	r31, r31
    1080:	e8 59       	subi	r30, 0x98	; 152
    1082:	ff 4f       	sbci	r31, 0xFF	; 255
    1084:	85 91       	lpm	r24, Z+
    1086:	94 91       	lpm	r25, Z+
    1088:	dc 01       	movw	r26, r24

	if (mode == INPUT) { 
    108a:	66 23       	and	r22, r22
    108c:	41 f4       	brne	.+16     	; 0x109e <pinMode+0x3a>
		uint8_t oldSREG = SREG;
    108e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    1090:	f8 94       	cli
		*reg &= ~bit;
    1092:	8c 91       	ld	r24, X
    1094:	20 95       	com	r18
    1096:	82 23       	and	r24, r18
    1098:	8c 93       	st	X, r24
		SREG = oldSREG;
    109a:	9f bf       	out	0x3f, r25	; 63
    109c:	08 95       	ret
	} else {
		uint8_t oldSREG = SREG;
    109e:	9f b7       	in	r25, 0x3f	; 63
                cli();
    10a0:	f8 94       	cli
		*reg |= bit;
    10a2:	8c 91       	ld	r24, X
    10a4:	82 2b       	or	r24, r18
    10a6:	8c 93       	st	X, r24
		SREG = oldSREG;
    10a8:	9f bf       	out	0x3f, r25	; 63
    10aa:	08 95       	ret

000010ac <digitalWrite>:
		#endif
	}
}

void digitalWrite(uint8_t pin, uint8_t val)
{
    10ac:	0f 93       	push	r16
    10ae:	1f 93       	push	r17
    10b0:	df 93       	push	r29
    10b2:	cf 93       	push	r28
    10b4:	0f 92       	push	r0
    10b6:	cd b7       	in	r28, 0x3d	; 61
    10b8:	de b7       	in	r29, 0x3e	; 62
	uint8_t timer = digitalPinToTimer(pin);
    10ba:	28 2f       	mov	r18, r24
    10bc:	30 e0       	ldi	r19, 0x00	; 0
    10be:	f9 01       	movw	r30, r18
    10c0:	e2 55       	subi	r30, 0x52	; 82
    10c2:	ff 4f       	sbci	r31, 0xFF	; 255
    10c4:	84 91       	lpm	r24, Z+
	uint8_t bit = digitalPinToBitMask(pin);
    10c6:	f9 01       	movw	r30, r18
    10c8:	e6 56       	subi	r30, 0x66	; 102
    10ca:	ff 4f       	sbci	r31, 0xFF	; 255
    10cc:	14 91       	lpm	r17, Z+
	uint8_t port = digitalPinToPort(pin);
    10ce:	2a 57       	subi	r18, 0x7A	; 122
    10d0:	3f 4f       	sbci	r19, 0xFF	; 255
    10d2:	f9 01       	movw	r30, r18
    10d4:	04 91       	lpm	r16, Z+
	volatile uint8_t *out;

	if (port == NOT_A_PIN) return;
    10d6:	00 23       	and	r16, r16
    10d8:	d9 f0       	breq	.+54     	; 0x1110 <digitalWrite+0x64>

	// If the pin that support PWM output, we need to turn it off
	// before doing a digital write.
	if (timer != NOT_ON_TIMER) turnOffPWM(timer);
    10da:	88 23       	and	r24, r24
    10dc:	21 f0       	breq	.+8      	; 0x10e6 <digitalWrite+0x3a>
    10de:	69 83       	std	Y+1, r22	; 0x01
    10e0:	0e 94 05 08 	call	0x100a	; 0x100a <turnOffPWM>
    10e4:	69 81       	ldd	r22, Y+1	; 0x01

	out = portOutputRegister(port);
    10e6:	e0 2f       	mov	r30, r16
    10e8:	f0 e0       	ldi	r31, 0x00	; 0
    10ea:	ee 0f       	add	r30, r30
    10ec:	ff 1f       	adc	r31, r31
    10ee:	ee 58       	subi	r30, 0x8E	; 142
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	85 91       	lpm	r24, Z+
    10f4:	94 91       	lpm	r25, Z+
    10f6:	dc 01       	movw	r26, r24

	uint8_t oldSREG = SREG;
    10f8:	9f b7       	in	r25, 0x3f	; 63
	cli();
    10fa:	f8 94       	cli

	if (val == LOW) {
    10fc:	66 23       	and	r22, r22
    10fe:	21 f4       	brne	.+8      	; 0x1108 <digitalWrite+0x5c>
		*out &= ~bit;
    1100:	8c 91       	ld	r24, X
    1102:	10 95       	com	r17
    1104:	81 23       	and	r24, r17
    1106:	02 c0       	rjmp	.+4      	; 0x110c <digitalWrite+0x60>
	} else {
		*out |= bit;
    1108:	8c 91       	ld	r24, X
    110a:	81 2b       	or	r24, r17
    110c:	8c 93       	st	X, r24
	}

	SREG = oldSREG;
    110e:	9f bf       	out	0x3f, r25	; 63
}
    1110:	0f 90       	pop	r0
    1112:	cf 91       	pop	r28
    1114:	df 91       	pop	r29
    1116:	1f 91       	pop	r17
    1118:	0f 91       	pop	r16
    111a:	08 95       	ret

0000111c <__mulsi3>:
    111c:	62 9f       	mul	r22, r18
    111e:	d0 01       	movw	r26, r0
    1120:	73 9f       	mul	r23, r19
    1122:	f0 01       	movw	r30, r0
    1124:	82 9f       	mul	r24, r18
    1126:	e0 0d       	add	r30, r0
    1128:	f1 1d       	adc	r31, r1
    112a:	64 9f       	mul	r22, r20
    112c:	e0 0d       	add	r30, r0
    112e:	f1 1d       	adc	r31, r1
    1130:	92 9f       	mul	r25, r18
    1132:	f0 0d       	add	r31, r0
    1134:	83 9f       	mul	r24, r19
    1136:	f0 0d       	add	r31, r0
    1138:	74 9f       	mul	r23, r20
    113a:	f0 0d       	add	r31, r0
    113c:	65 9f       	mul	r22, r21
    113e:	f0 0d       	add	r31, r0
    1140:	99 27       	eor	r25, r25
    1142:	72 9f       	mul	r23, r18
    1144:	b0 0d       	add	r27, r0
    1146:	e1 1d       	adc	r30, r1
    1148:	f9 1f       	adc	r31, r25
    114a:	63 9f       	mul	r22, r19
    114c:	b0 0d       	add	r27, r0
    114e:	e1 1d       	adc	r30, r1
    1150:	f9 1f       	adc	r31, r25
    1152:	bd 01       	movw	r22, r26
    1154:	cf 01       	movw	r24, r30
    1156:	11 24       	eor	r1, r1
    1158:	08 95       	ret

0000115a <__divmodhi4>:
    115a:	97 fb       	bst	r25, 7
    115c:	09 2e       	mov	r0, r25
    115e:	07 26       	eor	r0, r23
    1160:	0a d0       	rcall	.+20     	; 0x1176 <__divmodhi4_neg1>
    1162:	77 fd       	sbrc	r23, 7
    1164:	04 d0       	rcall	.+8      	; 0x116e <__divmodhi4_neg2>
    1166:	2e d0       	rcall	.+92     	; 0x11c4 <__udivmodhi4>
    1168:	06 d0       	rcall	.+12     	; 0x1176 <__divmodhi4_neg1>
    116a:	00 20       	and	r0, r0
    116c:	1a f4       	brpl	.+6      	; 0x1174 <__divmodhi4_exit>

0000116e <__divmodhi4_neg2>:
    116e:	70 95       	com	r23
    1170:	61 95       	neg	r22
    1172:	7f 4f       	sbci	r23, 0xFF	; 255

00001174 <__divmodhi4_exit>:
    1174:	08 95       	ret

00001176 <__divmodhi4_neg1>:
    1176:	f6 f7       	brtc	.-4      	; 0x1174 <__divmodhi4_exit>
    1178:	90 95       	com	r25
    117a:	81 95       	neg	r24
    117c:	9f 4f       	sbci	r25, 0xFF	; 255
    117e:	08 95       	ret

00001180 <__udivmodsi4>:
    1180:	a1 e2       	ldi	r26, 0x21	; 33
    1182:	1a 2e       	mov	r1, r26
    1184:	aa 1b       	sub	r26, r26
    1186:	bb 1b       	sub	r27, r27
    1188:	fd 01       	movw	r30, r26
    118a:	0d c0       	rjmp	.+26     	; 0x11a6 <__udivmodsi4_ep>

0000118c <__udivmodsi4_loop>:
    118c:	aa 1f       	adc	r26, r26
    118e:	bb 1f       	adc	r27, r27
    1190:	ee 1f       	adc	r30, r30
    1192:	ff 1f       	adc	r31, r31
    1194:	a2 17       	cp	r26, r18
    1196:	b3 07       	cpc	r27, r19
    1198:	e4 07       	cpc	r30, r20
    119a:	f5 07       	cpc	r31, r21
    119c:	20 f0       	brcs	.+8      	; 0x11a6 <__udivmodsi4_ep>
    119e:	a2 1b       	sub	r26, r18
    11a0:	b3 0b       	sbc	r27, r19
    11a2:	e4 0b       	sbc	r30, r20
    11a4:	f5 0b       	sbc	r31, r21

000011a6 <__udivmodsi4_ep>:
    11a6:	66 1f       	adc	r22, r22
    11a8:	77 1f       	adc	r23, r23
    11aa:	88 1f       	adc	r24, r24
    11ac:	99 1f       	adc	r25, r25
    11ae:	1a 94       	dec	r1
    11b0:	69 f7       	brne	.-38     	; 0x118c <__udivmodsi4_loop>
    11b2:	60 95       	com	r22
    11b4:	70 95       	com	r23
    11b6:	80 95       	com	r24
    11b8:	90 95       	com	r25
    11ba:	9b 01       	movw	r18, r22
    11bc:	ac 01       	movw	r20, r24
    11be:	bd 01       	movw	r22, r26
    11c0:	cf 01       	movw	r24, r30
    11c2:	08 95       	ret

000011c4 <__udivmodhi4>:
    11c4:	aa 1b       	sub	r26, r26
    11c6:	bb 1b       	sub	r27, r27
    11c8:	51 e1       	ldi	r21, 0x11	; 17
    11ca:	07 c0       	rjmp	.+14     	; 0x11da <__udivmodhi4_ep>

000011cc <__udivmodhi4_loop>:
    11cc:	aa 1f       	adc	r26, r26
    11ce:	bb 1f       	adc	r27, r27
    11d0:	a6 17       	cp	r26, r22
    11d2:	b7 07       	cpc	r27, r23
    11d4:	10 f0       	brcs	.+4      	; 0x11da <__udivmodhi4_ep>
    11d6:	a6 1b       	sub	r26, r22
    11d8:	b7 0b       	sbc	r27, r23

000011da <__udivmodhi4_ep>:
    11da:	88 1f       	adc	r24, r24
    11dc:	99 1f       	adc	r25, r25
    11de:	5a 95       	dec	r21
    11e0:	a9 f7       	brne	.-22     	; 0x11cc <__udivmodhi4_loop>
    11e2:	80 95       	com	r24
    11e4:	90 95       	com	r25
    11e6:	bc 01       	movw	r22, r24
    11e8:	cd 01       	movw	r24, r26
    11ea:	08 95       	ret

000011ec <__tablejump2__>:
    11ec:	ee 0f       	add	r30, r30
    11ee:	ff 1f       	adc	r31, r31

000011f0 <__tablejump__>:
    11f0:	05 90       	lpm	r0, Z+
    11f2:	f4 91       	lpm	r31, Z+
    11f4:	e0 2d       	mov	r30, r0
    11f6:	09 94       	ijmp

000011f8 <malloc>:
    11f8:	cf 93       	push	r28
    11fa:	df 93       	push	r29
    11fc:	82 30       	cpi	r24, 0x02	; 2
    11fe:	91 05       	cpc	r25, r1
    1200:	10 f4       	brcc	.+4      	; 0x1206 <malloc+0xe>
    1202:	82 e0       	ldi	r24, 0x02	; 2
    1204:	90 e0       	ldi	r25, 0x00	; 0
    1206:	e0 91 3e 02 	lds	r30, 0x023E
    120a:	f0 91 3f 02 	lds	r31, 0x023F
    120e:	40 e0       	ldi	r20, 0x00	; 0
    1210:	50 e0       	ldi	r21, 0x00	; 0
    1212:	20 e0       	ldi	r18, 0x00	; 0
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	26 c0       	rjmp	.+76     	; 0x1264 <malloc+0x6c>
    1218:	60 81       	ld	r22, Z
    121a:	71 81       	ldd	r23, Z+1	; 0x01
    121c:	68 17       	cp	r22, r24
    121e:	79 07       	cpc	r23, r25
    1220:	e0 f0       	brcs	.+56     	; 0x125a <malloc+0x62>
    1222:	68 17       	cp	r22, r24
    1224:	79 07       	cpc	r23, r25
    1226:	81 f4       	brne	.+32     	; 0x1248 <malloc+0x50>
    1228:	82 81       	ldd	r24, Z+2	; 0x02
    122a:	93 81       	ldd	r25, Z+3	; 0x03
    122c:	21 15       	cp	r18, r1
    122e:	31 05       	cpc	r19, r1
    1230:	31 f0       	breq	.+12     	; 0x123e <malloc+0x46>
    1232:	d9 01       	movw	r26, r18
    1234:	13 96       	adiw	r26, 0x03	; 3
    1236:	9c 93       	st	X, r25
    1238:	8e 93       	st	-X, r24
    123a:	12 97       	sbiw	r26, 0x02	; 2
    123c:	2b c0       	rjmp	.+86     	; 0x1294 <malloc+0x9c>
    123e:	90 93 3f 02 	sts	0x023F, r25
    1242:	80 93 3e 02 	sts	0x023E, r24
    1246:	26 c0       	rjmp	.+76     	; 0x1294 <malloc+0x9c>
    1248:	41 15       	cp	r20, r1
    124a:	51 05       	cpc	r21, r1
    124c:	19 f0       	breq	.+6      	; 0x1254 <malloc+0x5c>
    124e:	64 17       	cp	r22, r20
    1250:	75 07       	cpc	r23, r21
    1252:	18 f4       	brcc	.+6      	; 0x125a <malloc+0x62>
    1254:	ab 01       	movw	r20, r22
    1256:	e9 01       	movw	r28, r18
    1258:	df 01       	movw	r26, r30
    125a:	9f 01       	movw	r18, r30
    125c:	72 81       	ldd	r23, Z+2	; 0x02
    125e:	63 81       	ldd	r22, Z+3	; 0x03
    1260:	e7 2f       	mov	r30, r23
    1262:	f6 2f       	mov	r31, r22
    1264:	30 97       	sbiw	r30, 0x00	; 0
    1266:	c1 f6       	brne	.-80     	; 0x1218 <malloc+0x20>
    1268:	41 15       	cp	r20, r1
    126a:	51 05       	cpc	r21, r1
    126c:	01 f1       	breq	.+64     	; 0x12ae <malloc+0xb6>
    126e:	48 1b       	sub	r20, r24
    1270:	59 0b       	sbc	r21, r25
    1272:	44 30       	cpi	r20, 0x04	; 4
    1274:	51 05       	cpc	r21, r1
    1276:	80 f4       	brcc	.+32     	; 0x1298 <malloc+0xa0>
    1278:	12 96       	adiw	r26, 0x02	; 2
    127a:	8d 91       	ld	r24, X+
    127c:	9c 91       	ld	r25, X
    127e:	13 97       	sbiw	r26, 0x03	; 3
    1280:	20 97       	sbiw	r28, 0x00	; 0
    1282:	19 f0       	breq	.+6      	; 0x128a <malloc+0x92>
    1284:	9b 83       	std	Y+3, r25	; 0x03
    1286:	8a 83       	std	Y+2, r24	; 0x02
    1288:	04 c0       	rjmp	.+8      	; 0x1292 <malloc+0x9a>
    128a:	90 93 3f 02 	sts	0x023F, r25
    128e:	80 93 3e 02 	sts	0x023E, r24
    1292:	fd 01       	movw	r30, r26
    1294:	32 96       	adiw	r30, 0x02	; 2
    1296:	46 c0       	rjmp	.+140    	; 0x1324 <malloc+0x12c>
    1298:	fd 01       	movw	r30, r26
    129a:	e4 0f       	add	r30, r20
    129c:	f5 1f       	adc	r31, r21
    129e:	81 93       	st	Z+, r24
    12a0:	91 93       	st	Z+, r25
    12a2:	42 50       	subi	r20, 0x02	; 2
    12a4:	50 40       	sbci	r21, 0x00	; 0
    12a6:	11 96       	adiw	r26, 0x01	; 1
    12a8:	5c 93       	st	X, r21
    12aa:	4e 93       	st	-X, r20
    12ac:	3b c0       	rjmp	.+118    	; 0x1324 <malloc+0x12c>
    12ae:	20 91 3c 02 	lds	r18, 0x023C
    12b2:	30 91 3d 02 	lds	r19, 0x023D
    12b6:	21 15       	cp	r18, r1
    12b8:	31 05       	cpc	r19, r1
    12ba:	41 f4       	brne	.+16     	; 0x12cc <malloc+0xd4>
    12bc:	20 91 02 01 	lds	r18, 0x0102
    12c0:	30 91 03 01 	lds	r19, 0x0103
    12c4:	30 93 3d 02 	sts	0x023D, r19
    12c8:	20 93 3c 02 	sts	0x023C, r18
    12cc:	20 91 04 01 	lds	r18, 0x0104
    12d0:	30 91 05 01 	lds	r19, 0x0105
    12d4:	21 15       	cp	r18, r1
    12d6:	31 05       	cpc	r19, r1
    12d8:	41 f4       	brne	.+16     	; 0x12ea <malloc+0xf2>
    12da:	2d b7       	in	r18, 0x3d	; 61
    12dc:	3e b7       	in	r19, 0x3e	; 62
    12de:	40 91 00 01 	lds	r20, 0x0100
    12e2:	50 91 01 01 	lds	r21, 0x0101
    12e6:	24 1b       	sub	r18, r20
    12e8:	35 0b       	sbc	r19, r21
    12ea:	e0 91 3c 02 	lds	r30, 0x023C
    12ee:	f0 91 3d 02 	lds	r31, 0x023D
    12f2:	e2 17       	cp	r30, r18
    12f4:	f3 07       	cpc	r31, r19
    12f6:	a0 f4       	brcc	.+40     	; 0x1320 <malloc+0x128>
    12f8:	2e 1b       	sub	r18, r30
    12fa:	3f 0b       	sbc	r19, r31
    12fc:	28 17       	cp	r18, r24
    12fe:	39 07       	cpc	r19, r25
    1300:	78 f0       	brcs	.+30     	; 0x1320 <malloc+0x128>
    1302:	ac 01       	movw	r20, r24
    1304:	4e 5f       	subi	r20, 0xFE	; 254
    1306:	5f 4f       	sbci	r21, 0xFF	; 255
    1308:	24 17       	cp	r18, r20
    130a:	35 07       	cpc	r19, r21
    130c:	48 f0       	brcs	.+18     	; 0x1320 <malloc+0x128>
    130e:	4e 0f       	add	r20, r30
    1310:	5f 1f       	adc	r21, r31
    1312:	50 93 3d 02 	sts	0x023D, r21
    1316:	40 93 3c 02 	sts	0x023C, r20
    131a:	81 93       	st	Z+, r24
    131c:	91 93       	st	Z+, r25
    131e:	02 c0       	rjmp	.+4      	; 0x1324 <malloc+0x12c>
    1320:	e0 e0       	ldi	r30, 0x00	; 0
    1322:	f0 e0       	ldi	r31, 0x00	; 0
    1324:	cf 01       	movw	r24, r30
    1326:	df 91       	pop	r29
    1328:	cf 91       	pop	r28
    132a:	08 95       	ret

0000132c <free>:
    132c:	cf 93       	push	r28
    132e:	df 93       	push	r29
    1330:	00 97       	sbiw	r24, 0x00	; 0
    1332:	09 f4       	brne	.+2      	; 0x1336 <free+0xa>
    1334:	91 c0       	rjmp	.+290    	; 0x1458 <free+0x12c>
    1336:	fc 01       	movw	r30, r24
    1338:	32 97       	sbiw	r30, 0x02	; 2
    133a:	13 82       	std	Z+3, r1	; 0x03
    133c:	12 82       	std	Z+2, r1	; 0x02
    133e:	60 91 3e 02 	lds	r22, 0x023E
    1342:	70 91 3f 02 	lds	r23, 0x023F
    1346:	61 15       	cp	r22, r1
    1348:	71 05       	cpc	r23, r1
    134a:	81 f4       	brne	.+32     	; 0x136c <free+0x40>
    134c:	20 81       	ld	r18, Z
    134e:	31 81       	ldd	r19, Z+1	; 0x01
    1350:	28 0f       	add	r18, r24
    1352:	39 1f       	adc	r19, r25
    1354:	80 91 3c 02 	lds	r24, 0x023C
    1358:	90 91 3d 02 	lds	r25, 0x023D
    135c:	82 17       	cp	r24, r18
    135e:	93 07       	cpc	r25, r19
    1360:	99 f5       	brne	.+102    	; 0x13c8 <free+0x9c>
    1362:	f0 93 3d 02 	sts	0x023D, r31
    1366:	e0 93 3c 02 	sts	0x023C, r30
    136a:	76 c0       	rjmp	.+236    	; 0x1458 <free+0x12c>
    136c:	db 01       	movw	r26, r22
    136e:	80 e0       	ldi	r24, 0x00	; 0
    1370:	90 e0       	ldi	r25, 0x00	; 0
    1372:	02 c0       	rjmp	.+4      	; 0x1378 <free+0x4c>
    1374:	cd 01       	movw	r24, r26
    1376:	d9 01       	movw	r26, r18
    1378:	ae 17       	cp	r26, r30
    137a:	bf 07       	cpc	r27, r31
    137c:	48 f4       	brcc	.+18     	; 0x1390 <free+0x64>
    137e:	12 96       	adiw	r26, 0x02	; 2
    1380:	2d 91       	ld	r18, X+
    1382:	3c 91       	ld	r19, X
    1384:	13 97       	sbiw	r26, 0x03	; 3
    1386:	21 15       	cp	r18, r1
    1388:	31 05       	cpc	r19, r1
    138a:	a1 f7       	brne	.-24     	; 0x1374 <free+0x48>
    138c:	cd 01       	movw	r24, r26
    138e:	21 c0       	rjmp	.+66     	; 0x13d2 <free+0xa6>
    1390:	b3 83       	std	Z+3, r27	; 0x03
    1392:	a2 83       	std	Z+2, r26	; 0x02
    1394:	ef 01       	movw	r28, r30
    1396:	49 91       	ld	r20, Y+
    1398:	59 91       	ld	r21, Y+
    139a:	9e 01       	movw	r18, r28
    139c:	24 0f       	add	r18, r20
    139e:	35 1f       	adc	r19, r21
    13a0:	a2 17       	cp	r26, r18
    13a2:	b3 07       	cpc	r27, r19
    13a4:	79 f4       	brne	.+30     	; 0x13c4 <free+0x98>
    13a6:	2d 91       	ld	r18, X+
    13a8:	3c 91       	ld	r19, X
    13aa:	11 97       	sbiw	r26, 0x01	; 1
    13ac:	24 0f       	add	r18, r20
    13ae:	35 1f       	adc	r19, r21
    13b0:	2e 5f       	subi	r18, 0xFE	; 254
    13b2:	3f 4f       	sbci	r19, 0xFF	; 255
    13b4:	31 83       	std	Z+1, r19	; 0x01
    13b6:	20 83       	st	Z, r18
    13b8:	12 96       	adiw	r26, 0x02	; 2
    13ba:	2d 91       	ld	r18, X+
    13bc:	3c 91       	ld	r19, X
    13be:	13 97       	sbiw	r26, 0x03	; 3
    13c0:	33 83       	std	Z+3, r19	; 0x03
    13c2:	22 83       	std	Z+2, r18	; 0x02
    13c4:	00 97       	sbiw	r24, 0x00	; 0
    13c6:	29 f4       	brne	.+10     	; 0x13d2 <free+0xa6>
    13c8:	f0 93 3f 02 	sts	0x023F, r31
    13cc:	e0 93 3e 02 	sts	0x023E, r30
    13d0:	43 c0       	rjmp	.+134    	; 0x1458 <free+0x12c>
    13d2:	dc 01       	movw	r26, r24
    13d4:	13 96       	adiw	r26, 0x03	; 3
    13d6:	fc 93       	st	X, r31
    13d8:	ee 93       	st	-X, r30
    13da:	12 97       	sbiw	r26, 0x02	; 2
    13dc:	4d 91       	ld	r20, X+
    13de:	5d 91       	ld	r21, X+
    13e0:	a4 0f       	add	r26, r20
    13e2:	b5 1f       	adc	r27, r21
    13e4:	ea 17       	cp	r30, r26
    13e6:	fb 07       	cpc	r31, r27
    13e8:	69 f4       	brne	.+26     	; 0x1404 <free+0xd8>
    13ea:	20 81       	ld	r18, Z
    13ec:	31 81       	ldd	r19, Z+1	; 0x01
    13ee:	24 0f       	add	r18, r20
    13f0:	35 1f       	adc	r19, r21
    13f2:	2e 5f       	subi	r18, 0xFE	; 254
    13f4:	3f 4f       	sbci	r19, 0xFF	; 255
    13f6:	ec 01       	movw	r28, r24
    13f8:	39 83       	std	Y+1, r19	; 0x01
    13fa:	28 83       	st	Y, r18
    13fc:	22 81       	ldd	r18, Z+2	; 0x02
    13fe:	33 81       	ldd	r19, Z+3	; 0x03
    1400:	3b 83       	std	Y+3, r19	; 0x03
    1402:	2a 83       	std	Y+2, r18	; 0x02
    1404:	e0 e0       	ldi	r30, 0x00	; 0
    1406:	f0 e0       	ldi	r31, 0x00	; 0
    1408:	02 c0       	rjmp	.+4      	; 0x140e <free+0xe2>
    140a:	fb 01       	movw	r30, r22
    140c:	bc 01       	movw	r22, r24
    140e:	db 01       	movw	r26, r22
    1410:	12 96       	adiw	r26, 0x02	; 2
    1412:	8d 91       	ld	r24, X+
    1414:	9c 91       	ld	r25, X
    1416:	13 97       	sbiw	r26, 0x03	; 3
    1418:	00 97       	sbiw	r24, 0x00	; 0
    141a:	b9 f7       	brne	.-18     	; 0x140a <free+0xde>
    141c:	9b 01       	movw	r18, r22
    141e:	2e 5f       	subi	r18, 0xFE	; 254
    1420:	3f 4f       	sbci	r19, 0xFF	; 255
    1422:	8d 91       	ld	r24, X+
    1424:	9c 91       	ld	r25, X
    1426:	11 97       	sbiw	r26, 0x01	; 1
    1428:	82 0f       	add	r24, r18
    142a:	93 1f       	adc	r25, r19
    142c:	40 91 3c 02 	lds	r20, 0x023C
    1430:	50 91 3d 02 	lds	r21, 0x023D
    1434:	48 17       	cp	r20, r24
    1436:	59 07       	cpc	r21, r25
    1438:	79 f4       	brne	.+30     	; 0x1458 <free+0x12c>
    143a:	30 97       	sbiw	r30, 0x00	; 0
    143c:	29 f4       	brne	.+10     	; 0x1448 <free+0x11c>
    143e:	10 92 3f 02 	sts	0x023F, r1
    1442:	10 92 3e 02 	sts	0x023E, r1
    1446:	02 c0       	rjmp	.+4      	; 0x144c <free+0x120>
    1448:	13 82       	std	Z+3, r1	; 0x03
    144a:	12 82       	std	Z+2, r1	; 0x02
    144c:	22 50       	subi	r18, 0x02	; 2
    144e:	30 40       	sbci	r19, 0x00	; 0
    1450:	30 93 3d 02 	sts	0x023D, r19
    1454:	20 93 3c 02 	sts	0x023C, r18
    1458:	df 91       	pop	r29
    145a:	cf 91       	pop	r28
    145c:	08 95       	ret

0000145e <__do_global_dtors>:
    145e:	10 e0       	ldi	r17, 0x00	; 0
    1460:	c6 ec       	ldi	r28, 0xC6	; 198
    1462:	d0 e0       	ldi	r29, 0x00	; 0
    1464:	04 c0       	rjmp	.+8      	; 0x146e <__do_global_dtors+0x10>
    1466:	fe 01       	movw	r30, r28
    1468:	0e 94 f8 08 	call	0x11f0	; 0x11f0 <__tablejump__>
    146c:	22 96       	adiw	r28, 0x02	; 2
    146e:	c8 3c       	cpi	r28, 0xC8	; 200
    1470:	d1 07       	cpc	r29, r17
    1472:	c9 f7       	brne	.-14     	; 0x1466 <__do_global_dtors+0x8>
    1474:	f8 94       	cli

00001476 <__stop_program>:
    1476:	ff cf       	rjmp	.-2      	; 0x1476 <__stop_program>
